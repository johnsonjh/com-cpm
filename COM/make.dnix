#
# Make file for the CP/M 2.2 Simulator for DNIX 680x0 machines.
#

.SUFFIXES: .o .L .s .mac

CPP=/lib/cpp

#
# Set the type of system here to one of DNIX, SYSV, CYGW, NEXT or BSD.
# DNIX is SVR2 with some Xenix extensions, like the rdchk function.
# CYGW (Cygwin) is SYSV with a broken VMIN/VTIME implementation.
# NEXT (NeXTStep) is BSD with a messy dirent implementation.
#
# SYSTYPE= One of: DNIX, SYSV, CYGW, NEXT, or BSD (also for linux, OSX)
SYSTYPE=DNIX

#
# Configuration options.
# To get Z80 simulation, give it -DZ80 here
OPTIONS=-D$(SYSTYPE)=1 -DZ80 -DRUNOPTS -DUSEDIRENT

#
# Code-generation options.
CFLAGS=-O $(OPTIONS)

#
# Normal version, works on 68020+.
#
com: cpu.o cpu2.o com.o console.o dir.o disass.o fakefs.o Makefile
	$(CC) cpu.o cpu2.o com.o console.o dir.o disass.o fakefs.o -o $@

#
# Slower version, works on 68010.  8080 only.
#
com10: cpu10.o com.o console.o dir.o disass.o fakefs.o com.link Makefile
	$(CC) com.link cpu10.o com.o console.o dir.o disass.o fakefs.o -o $@ -m >com10.map

#
# Tracing versions (even slower).
#
comt: cput.o cpu2t.o comt.o console.o dir.o disass.o fakefs.o Makefile
	$(CC) cput.o cpu2t.o comt.o console.o dir.o disass.o fakefs.o -o $@

com10t: cpu10t.o comt.o console.o dir.o disass.o fakefs.o com.link Makefile
	$(CC) com.link cpu10t.o comt.o console.o dir.o disass.o fakefs.o -o $@ -m >com10t.map

#
# C version (not fast).
#

ccom: ccpu.o com.o console.o dir.o disass.o fakefs.o Makefile
	$(CC) ccpu.o com.o console.o dir.o disass.o fakefs.o -o $@

ccomt: ccput.o comt.o console.o dir.o disass.o fakefs.o Makefile
	$(CC) ccput.o comt.o console.o dir.o disass.o fakefs.o -o $@

#
# Contest versions (very slow).  Pits both CPU implementations against
# each other.  The intent is to use them to diagnose each other, to
# bootstrap themselves up to a greater level of functionality.
#
comtest: ccputest.o cputest.o cpu2t.o comtest.o console.o dir.o disass.o fakefs.o Makefile
	$(CC) ccputest.o cputest.o cpu2t.o comtest.o console.o dir.o disass.o fakefs.o -o $@

com10test: cputest10.o ccputest.o comtest.o console.o dir.o disass.o fakefs.o com.link Makefile
	$(CC) com.link cputest10.o ccputest.o comtest.o console.o dir.o disass.o fakefs.o -o $@ -m >com10test.map


cpu.o: cpu.mac asmacros.h mactodas Makefile
	$(CPP) -DFAST -DM68020 $(OPTIONS) -P cpu.mac cpu.s1
	tr ';' '\012' <cpu.s1 | sed -f mactodas >cpu.s
	rm -f cpu.s1
	$(AS) -T /usr/etc/M68020.tab cpu.s -o $@

cpu10.o: cpu.mac asmacros.h mactodas Makefile
	$(CPP) -DFAST $(OPTIONS) -UZ80 -URUNOPTS -P cpu.mac cpu10.s1
	tr ';' '\012' <cpu10.s1 | sed -f mactodas >cpu10.s
	rm -f cpu10.s1
	$(AS) cpu10.s -o $@

cput.o: cpu.mac asmacros.h mactodas Makefile
	$(CPP) -DTRACE -DM68020 $(OPTIONS) -P cpu.mac cput.s1
	tr ';' '\012' <cput.s1 | sed -f mactodas >cput.s
	rm -f cput.s1
	$(AS) -T /usr/etc/M68020.tab cput.s -o $@

cpu10t.o: cpu.mac asmacros.h mactodas Makefile
	$(CPP) -DTRACE $(OPTIONS) -UZ80 -URUNOPTS -P cpu.mac cpu10t.s1
	tr ';' '\012' <cpu10t.s1 | sed -f mactodas >cpu10t.s
	rm -f cpu10t.s1
	$(AS) cpu10t.s -o $@

cputest.o: cpu.mac asmacros.h mactodas Makefile
	$(CPP) -DTRACE -DCONTEST -DM68020 $(OPTIONS) -P cpu.mac cputest.s1
	tr ';' '\012' <cputest.s1 | sed -f mactodas >cputest.s
	rm -f cputest.s1
	$(AS) -T /usr/etc/M68020.tab cputest.s -o $@

cputest10.o: cpu.mac asmacros.h mactodas Makefile
	$(CPP) -DTRACE -DCONTEST $(OPTIONS) -UZ80 -URUNOPTS -P cpu.mac cputest10.s1
	tr ';' '\012' <cputest10.s1 | sed -f mactodas >cputest10.s
	rm -f cputest10.s1
	$(AS) -T /usr/etc/M68020.tab cputest10.s -o $@

cpu2.o: cpu2.mac asmacros.h mactodas Makefile
	$(CPP) -DFAST -DM68020 $(OPTIONS) -P cpu2.mac cpu2.s1
	tr ';' '\012' <cpu2.s1 | sed -f mactodas >cpu2.s
	rm -f cpu2.s1
	$(AS) -T /usr/etc/M68020.tab cpu2.s -o $@

cpu2t.o: cpu2.mac asmacros.h mactodas Makefile
	$(CPP) -DTRACE -DM68020 $(OPTIONS) -P cpu2.mac cpu2t.s1
	tr ';' '\012' <cpu2t.s1 | sed -f mactodas >cpu2t.s
	rm -f cpu2t.s1
	$(AS) -T /usr/etc/M68020.tab cpu2t.s -o $@

ccput.o: ccpu.c com.h Makefile
	$(CC) $(CFLAGS) -DTRACE -c ccpu.c -o $@

ccputest.o: ccpu.c com.h Makefile
	$(CC) $(CFLAGS) -DTRACE -DCONTEST -c ccpu.c -o $@

com.o: com.c com.h Makefile
	$(CC) $(CFLAGS) -c -DFAST com.c -o $@

comt.o: com.c com.h Makefile
	$(CC) $(CFLAGS) -c -DTRACE com.c -o $@

comtest.o: com.c com.h Makefile
	$(CC) $(CFLAGS) -c -DTRACE -DCONTEST -DFAST com.c -o $@

console.o: com.h console.c Makefile

dir.o: com.h dir.c Makefile

ws_com.c: testprogs/ws.com
	./bintoc $? ws_com >$@
	mv ws_com.o wscom.o

wsmsgs_ovr.c: testprogs/wsmsgs.ovr
	./bintoc $? wsmsgs_ovr >$@
	mv wsmsgs_ovr.o wsmsgsovr.o

wsovly1_ovr.c: testprogs/wsovly1.ovr
	./bintoc $? wsovly1_ovr >$@
	mv wsovly1_ovr.o wsovly1ovr.o

mbasic_com.c: testprogs/mbasic.com
	./bintoc $? mbasic_com >$@
	mv mbasic_com.o mbasiccom.o

fakefsws.o: fakefs.c ws_com.o wsmsgs_ovr.o wsovly1_ovr.o
	$(CC) $(CFLAGS) -DWORDSTAR -c fakefs.c -o $@

embed.o: com.c com.h Makefile
	$(CC) $(CFLAGS) -DEMBED -c com.c -o $@

ws: cpu.o cpu2.o console.o dir.o disass.o fakefsws.o embed.o ws_com.o wsmsgs_ovr.o wsovly1_ovr.o Makefile
	$(CC) cpu.o cpu2.o console.o dir.o disass.o fakefsws.o embed.o ws_com.o wsmsgs_ovr.o wsovly1_ovr.o wscom.o wsmsgsovr.o wsovly1ovr.o -o $@

fakefsmb.o: fakefs.c mbasic_com.o
	$(CC) $(CFLAGS) -DMBASIC -c fakefs.c -o $@

mbasic: cpu.o cpu2.o console.o dir.o disass.o fakefsmb.o embed.o mbasic_com.o Makefile
	$(CC) cpu.o cpu2.o console.o dir.o disass.o fakefsmb.o embed.o mbasic_com.o mbasiccom.o -o $@

zork1_com.c: testprogs/zork1.com
	./bintoc $? zork1_com >$@
	mv zork1_com.o zork1com.o

zork1_dat.c: testprogs/zork1.dat
	./bintoc $? zork1_dat >$@
	mv zork1_dat.o zork1dat.o

fakefsz1.o: fakefs.c zork1_com.o
	$(CC) $(CFLAGS) -DZORK1 -c fakefs.c -o $@

zork1: cpu.o cpu2.o console.o dir.o disass.o fakefsz1.o embed.o zork1_com.o zork1_dat.o Makefile
	$(CC) cpu.o cpu2.o console.o dir.o disass.o fakefsz1.o embed.o zork1_com.o zork1_dat.o zork1com.o zork1dat.o -o $@

zork2_com.c: testprogs/zork2.com
	./bintoc $? zork2_com >$@
	mv zork2_com.o zork2com.o

zork2_dat.c: testprogs/zork2.dat
	./bintoc $? zork2_dat >$@
	mv zork2_dat.o zork2dat.o

fakefsz2.o: fakefs.c zork2_com.o
	$(CC) $(CFLAGS) -DZORK2 -c fakefs.c -o $@

zork2: cpu.o cpu2.o console.o dir.o disass.o fakefsz2.o embed.o zork2_com.o zork2_dat.o Makefile
	$(CC) cpu.o cpu2.o console.o dir.o disass.o fakefsz2.o embed.o zork2_com.o zork2_dat.o zork2com.o zork2dat.o -o $@

zork3_com.c: testprogs/zork3.com
	./bintoc $? zork3_com >$@
	mv zork3_com.o zork3com.o

zork3_dat.c: testprogs/zork3.dat
	./bintoc $? zork3_dat >$@
	mv zork3_dat.o zork3dat.o

fakefsz3.o: fakefs.c zork3_com.o
	$(CC) $(CFLAGS) -DZORK3 -c fakefs.c -o $@

zork3: cpu.o cpu2.o console.o dir.o disass.o fakefsz3.o embed.o zork3_com.o zork3_dat.o Makefile
	$(CC) cpu.o cpu2.o console.o dir.o disass.o fakefsz3.o embed.o zork3_com.o zork3_dat.o zork3com.o zork3dat.o -o $@

.PHONY: all clean

all: com comt com10 com10t ccom ccomt comtest com10test \
	ws mbasic zork1 zork2 zork3

benchmark: com comt com10 com10t ccom ccomt comtest com10test
	./benchtest $? >$@

clean:
	rm -f com comt com10 com10t ccom ccomt comtest com10test \
		*.[soL] *.s1 a.out *.map core benchmark \
		ws ws_com.c wsmsgs_ovr.c wsovly1_ovr.c mbasic mbasic_com.c \
		zork1 zork1_com.c zork1_dat.c zork2 zork2_com.c zork2_dat.c \
		zork3 zork3_com.c zork3_dat.c

.s.o:
	$(AS) $? -o $@

.s.L:
	$(AS) -l -T /usr/etc/M68020.tab $?
