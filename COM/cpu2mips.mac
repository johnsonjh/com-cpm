|***********************************************************************|
|									|
|	Z-80 opcode simulation routines 				|
|									|
|***********************************************************************|

#ifdef Z80
#  include "mipsmacros.h"	/* Get NEXT code & declarations. */

	.globl badop,CBoptab,DDoptab,EDoptab,FDoptab,DDCBopt
	.globl prDDCB,prFDCB,illgED,ilDDCB,mloop

	.set noat	| Allow use of $1 in this code for scratch.

inp:	and regf,regf,regcon01
	jr $ra
	nop

outp:	jr $ra
	nop

rlcb:	lbu $2,regb(regs)			| CB00 RLC B
	RLCR($2)
	sb $2,regb(regs)
	setapflags($2)
	next

rlcc:	lbu $2,regc(regs)			| CB01 RLC C
	RLCR($2)
	sb $2,regc(regs)
	setapflags($2)
	next

rlcd:	lbu $2,regd(regs)			| CB02 RLC D
	RLCR($2)
	sb $2,regd(regs)
	setapflags($2)
	next

rlce:	lbu $2,rege(regs)			| CB03 RLC E
	RLCR($2)
	sb $2,rege(regs)
	setapflags($2)
	next

rlch:	lbu $2,regh(regs)			| CB04 RLC H
	RLCR($2)
	sb $2,regh(regs)
	setapflags($2)
	next

rlcl:	lbu $2,regl(regs)			| CB05 RLC L
	RLCR($2)
	sb $2,regl(regs)
	setapflags($2)
	next

rlcm:	lhu $3,regh(regs)			| CB06 RLC M
	addu $3,$3,targbase
	lbu $2,0($3)
	RLCR($2)
	sb $2,0($3)
	setapflags($2)
	next

rlca:	RLCR(rega)				| CB07 RLC A
	setapflags(rega)
	next

rrcb:	lbu $2,regb(regs)			| CB08 RRC B
	RRCR($2)
	sb $2,regb(regs)
	setapflags($2)
	next

rrcc:	lbu $2,regc(regs)			| CB09 RRC C
	RRCR($2)
	sb $2,regc(regs)
	setapflags($2)
	next

rrcd:	lbu $2,regd(regs)			| CB0A RRC D
	RRCR($2)
	sb $2,regd(regs)
	setapflags($2)
	next

rrce:	lbu $2,rege(regs)			| CB0B RRC E
	RRCR($2)
	sb $2,rege(regs)
	setapflags($2)
	next

rrch:	lbu $2,regh(regs)			| CB0C RRC H
	RRCR($2)
	sb $2,regh(regs)
	setapflags($2)
	next

rrcl:	lbu $2,regl(regs)			| CB0D RRC L
	RRCR($2)
	sb $2,regl(regs)
	setapflags($2)
	next

rrcm:	lhu $3,regh(regs)			| CB0E RRC M
	addu $3,$3,targbase
	lbu $2,0($3)
	RRCR($2)
	sb $2,0($3)
	setapflags($2)
	next

rrca:	RRCR(rega)				| CB0F RRC A
	setapflags(rega)
	next

rlrb:	lbu $2,regb(regs)			| CB10 RL B
	RALR($2)
	andi $2,$2,0xFF
	sb $2,regb(regs)
	setapflags($2)
	next

rlrc:	lbu $2,regc(regs)			| CB11 RL C
	RALR($2)
	andi $2,$2,0xFF
	sb $2,regc(regs)
	setapflags($2)
	next

rlrd:	lbu $2,regd(regs)			| CB12 RL D
	RALR($2)
	andi $2,$2,0xFF
	sb $2,regd(regs)
	setapflags($2)
	next

rlre:	lbu $2,rege(regs)			| CB13 RL E
	RALR($2)
	andi $2,$2,0xFF
	sb $2,rege(regs)
	setapflags($2)
	next

rlrh:	lbu $2,regh(regs)			| CB14 RL H
	RALR($2)
	andi $2,$2,0xFF
	sb $2,regh(regs)
	setapflags($2)
	next

rlrl:	lbu $2,regl(regs)			| CB15 RL L
	RALR($2)
	andi $2,$2,0xFF
	sb $2,regl(regs)
	setapflags($2)
	next

rlrm:	lhu $3,regh(regs)			| CB16 RL M
	addu $3,$3,targbase
	lbu $2,0($3)
	RALR($2)
	andi $2,$2,0xFF
	sb $2,0($3)
	setapflags($2)
	next

rlra:	RALR(rega)				| CB17 RL A
	andi rega,rega,0xFF
	setapflags(rega)
	next

rrrb:	lbu $2,regb(regs)			| CB18 RR B
	RARR($2)
	sb $2,regb(regs)
	setapflags($2)
	next

rrrc:	lbu $2,regc(regs)			| CB19 RR C
	RARR($2)
	sb $2,regc(regs)
	setapflags($2)
	next

rrrd:	lbu $2,regd(regs)			| CB1A RR D
	RARR($2)
	sb $2,regd(regs)
	setapflags($2)
	next

rrre:	lbu $2,rege(regs)			| CB1B RR E
	RARR($2)
	sb $2,rege(regs)
	setapflags($2)
	next

rrrh:	lbu $2,regh(regs)			| CB1C RR H
	RARR($2)
	sb $2,regh(regs)
	setapflags($2)
	next

rrrl:	lbu $2,regl(regs)			| CB1D RR L
	RARR($2)
	sb $2,regl(regs)
	setapflags($2)
	next

rrrm:	lhu $3,regh(regs)			| CB1E RR M
	addu $3,$3,targbase
	lbu $2,0($3)
	RARR($2)
	sb $2,0($3)
	setapflags($2)
	next

rrra:	RARR(rega)				| CB1F RR A
	setapflags(rega)
	next

slab:	lbu $2,regb(regs)			| CB20 SLA B
	SLAR($2)
	sb $2,regb(regs)
	setapflags($2)
	next

slac:	lbu $2,regc(regs)			| CB21 SLA C
	SLAR($2)
	sb $2,regc(regs)
	setapflags($2)
	next

slad:	lbu $2,regd(regs)			| CB22 SLA D
	SLAR($2)
	sb $2,regd(regs)
	setapflags($2)
	next

slae:	lbu $2,rege(regs)			| CB23 SLA E
	SLAR($2)
	sb $2,rege(regs)
	setapflags($2)
	next

slah:	lbu $2,regh(regs)			| CB24 SLA H
	SLAR($2)
	sb $2,regh(regs)
	setapflags($2)
	next

slal:	lbu $2,regl(regs)			| CB25 SLA L
	SLAR($2)
	sb $2,regl(regs)
	setapflags($2)
	next

slam:	lhu $3,regh(regs)			| CB26 SLA M
	addu $3,$3,targbase
	lbu $2,0($3)
	SLAR($2)
	sb $2,0($3)
	setapflags($2)
	next

slaa:	SLAR(rega)				| CB27 SLA A
	setapflags(rega)
	next

srab:	lbu $2,regb(regs)			| CB28 SRA B
	SRAR($2)
	sb $2,regb(regs)
	setapflags($2)
	next

srac:	lbu $2,regc(regs)			| CB29 SRA C
	SRAR($2)
	sb $2,regc(regs)
	setapflags($2)
	next

srad:	lbu $2,regd(regs)			| CB2A SRA D
	SRAR($2)
	sb $2,regd(regs)
	setapflags($2)
	next

srae:	lbu $2,rege(regs)			| CB2B SRA E
	SRAR($2)
	sb $2,rege(regs)
	setapflags($2)
	next

srah:	lbu $2,regh(regs)			| CB2C SRA H
	SRAR($2)
	sb $2,regh(regs)
	setapflags($2)
	next

sral:	lbu $2,regl(regs)			| CB2D SRA L
	SRAR($2)
	sb $2,regl(regs)
	setapflags($2)
	next

sram:	lhu $3,regh(regs)			| CB2E SRA M
	addu $3,$3,targbase
	lbu $2,0($3)
	SRAR($2)
	sb $2,0($3)
	setapflags($2)
	next

sraa:	SRAR(rega)				| CB2F SRA A
	setapflags(rega)
	next

srlb:	lbu $2,regb(regs)			| CB38 SRL B
	SRLR($2)
	sb $2,regb(regs)
	setapflags($2)
	next

srlc:	lbu $2,regc(regs)			| CB39 SRL C
	SRLR($2)
	sb $2,regc(regs)
	setapflags($2)
	next

srld:	lbu $2,regd(regs)			| CB3A SRL D
	SRLR($2)
	sb $2,regd(regs)
	setapflags($2)
	next

srle:	lbu $2,rege(regs)			| CB3B SRL E
	SRLR($2)
	sb $2,rege(regs)
	setapflags($2)
	next

srlh:	lbu $2,regh(regs)			| CB3C SRL H
	SRLR($2)
	sb $2,regh(regs)
	setapflags($2)
	next

srll:	lbu $2,regl(regs)			| CB3D SRL L
	SRLR($2)
	sb $2,regl(regs)
	setapflags($2)
	next

srlm:	lhu $3,regh(regs)			| CB3E SRL M
	addu $3,$3,targbase
	lbu $2,0($3)
	SRLR($2)
	sb $2,0($3)
	setapflags($2)
	next

srla:	SRLR(rega)				| CB3F SRL A
	setapflags(rega)
	next

bit0b:	lbu $2,regb(regs)			| CB40 BIT 0,B
	andi $2,$2,1
	bit($2)
	next

bit0c:	lbu $2,regc(regs)			| CB41 BIT 0,C
	andi $2,$2,1
	bit($2)
	next

bit0d:	lbu $2,regd(regs)			| CB42 BIT 0,D
	andi $2,$2,1
	bit($2)
	next

bit0e:	lbu $2,rege(regs)			| CB43 BIT 0,E
	andi $2,$2,1
	bit($2)
	next

bit0h:	lbu $2,regh(regs)			| CB44 BIT 0,H
	andi $2,$2,1
	bit($2)
	next

bit0l:	lbu $2,regl(regs)			| CB45 BIT 0,L
	andi $2,$2,1
	bit($2)
	next

bit0m:	lhu $3,regh(regs)			| CB46 BIT 0,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,1
	bit($2)
	next

bit0a:	andi $2,rega,1				| CB47 BIT 0,A
	bit($2)
	next

bit1b:	lbu $2,regb(regs)			| CB48 BIT 1,B
	andi $2,$2,2
	bit($2)
	next

bit1c:	lbu $2,regc(regs)			| CB49 BIT 1,C
	andi $2,$2,2
	bit($2)
	next

bit1d:	lbu $2,regd(regs)			| CB4A BIT 1,D
	andi $2,$2,2
	bit($2)
	next

bit1e:	lbu $2,rege(regs)			| CB4B BIT 1,E
	andi $2,$2,2
	bit($2)
	next

bit1h:	lbu $2,regh(regs)			| CB4C BIT 1,H
	andi $2,$2,2
	bit($2)
	next

bit1l:	lbu $2,regl(regs)			| CB4D BIT 1,L
	andi $2,$2,2
	bit($2)
	next

bit1m:	lhu $3,regh(regs)			| CB4E BIT 1,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,2
	bit($2)
	next

bit1a:	andi $2,rega,2				| CB4F BIT 1,A
	bit($2)
	next

bit2b:	lbu $2,regb(regs)			| CB50 BIT 2,B
	andi $2,$2,4
	bit($2)
	next

bit2c:	lbu $2,regc(regs)			| CB51 BIT 2,C
	andi $2,$2,4
	bit($2)
	next

bit2d:	lbu $2,regd(regs)			| CB52 BIT 2,D
	andi $2,$2,4
	bit($2)
	next

bit2e:	lbu $2,rege(regs)			| CB53 BIT 2,E
	andi $2,$2,4
	bit($2)
	next

bit2h:	lbu $2,regh(regs)			| CB54 BIT 2,H
	andi $2,$2,4
	bit($2)
	next

bit2l:	lbu $2,regl(regs)			| CB55 BIT 2,L
	andi $2,$2,4
	bit($2)
	next

bit2m:	lhu $3,regh(regs)			| CB56 BIT 2,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,4
	bit($2)
	next

bit2a:	andi $2,rega,8				| CB57 BIT 2,A
	bit($2)
	next

bit3b:	lbu $2,regb(regs)			| CB58 BIT 3,B
	andi $2,$2,8
	bit($2)
	next

bit3c:	lbu $2,regc(regs)			| CB59 BIT 3,C
	andi $2,$2,8
	bit($2)
	next

bit3d:	lbu $2,regd(regs)			| CB5A BIT 3,D
	andi $2,$2,8
	bit($2)
	next

bit3e:	lbu $2,rege(regs)			| CB5B BIT 3,E
	andi $2,$2,8
	bit($2)
	next

bit3h:	lbu $2,regh(regs)			| CB5C BIT 3,H
	andi $2,$2,8
	bit($2)
	next

bit3l:	lbu $2,regl(regs)			| CB5D BIT 3,L
	andi $2,$2,8
	bit($2)
	next

bit3m:	lhu $3,regh(regs)			| CB5E BIT 3,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,8
	bit($2)
	next

bit3a:	andi $2,rega,8				| CB5F BIT 3,A
	bit($2)
	next

bit4b:	lbu $2,regb(regs)			| CB60 BIT 4,B
	andi $2,$2,0x10
	bit($2)
	next

bit4c:	lbu $2,regc(regs)			| CB61 BIT 4,C
	andi $2,$2,0x10
	bit($2)
	next

bit4d:	lbu $2,regd(regs)			| CB62 BIT 4,D
	andi $2,$2,0x10
	bit($2)
	next

bit4e:	lbu $2,rege(regs)			| CB63 BIT 4,E
	andi $2,$2,0x10
	bit($2)
	next

bit4h:	lbu $2,regh(regs)			| CB64 BIT 4,H
	andi $2,$2,0x10
	bit($2)
	next

bit4l:	lbu $2,regl(regs)			| CB65 BIT 4,L
	andi $2,$2,0x10
	bit($2)
	next

bit4m:	lhu $3,regh(regs)			| CB66 BIT 4,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0x10
	bit($2)
	next

bit4a:	andi $2,rega,0x10			| CB67 BIT 4,A
	bit($2)
	next

bit5b:	lbu $2,regb(regs)			| CB68 BIT 5,B
	andi $2,$2,0x20
	bit($2)
	next

bit5c:	lbu $2,regc(regs)			| CB69 BIT 5,C
	andi $2,$2,0x20
	bit($2)
	next

bit5d:	lbu $2,regd(regs)			| CB6A BIT 5,D
	andi $2,$2,0x20
	bit($2)
	next

bit5e:	lbu $2,rege(regs)			| CB6B BIT 5,E
	andi $2,$2,0x20
	bit($2)
	next

bit5h:	lbu $2,regh(regs)			| CB6C BIT 5,H
	andi $2,$2,0x20
	bit($2)
	next

bit5l:	lbu $2,regl(regs)			| CB6D BIT 5,L
	andi $2,$2,0x20
	bit($2)
	next

bit5m:	lhu $3,regh(regs)			| CB6E BIT 5,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0x20
	bit($2)
	next

bit5a:	andi $2,rega,0x20			| CB6F BIT 5,A
	bit($2)
	next

bit6b:	lbu $2,regb(regs)			| CB70 BIT 6,B
	andi $2,$2,0x40
	bit($2)
	next

bit6c:	lbu $2,regc(regs)			| CB71 BIT 6,C
	andi $2,$2,0x40
	bit($2)
	next

bit6d:	lbu $2,regd(regs)			| CB72 BIT 6,D
	andi $2,$2,0x40
	bit($2)
	next

bit6e:	lbu $2,rege(regs)			| CB73 BIT 6,E
	andi $2,$2,0x40
	bit($2)
	next

bit6h:	lbu $2,regh(regs)			| CB74 BIT 6,H
	andi $2,$2,0x40
	bit($2)
	next

bit6l:	lbu $2,regl(regs)			| CB75 BIT 6,L
	andi $2,$2,0x40
	bit($2)
	next

bit6m:	lhu $3,regh(regs)			| CB76 BIT 6,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0x40
	bit($2)
	next

bit6a:	andi $2,rega,0x40			| CB77 BIT 6,A
	bit($2)
	next

bit7b:	lbu $2,regb(regs)			| CB78 BIT 7,B
	andi $2,$2,0x80
	bit($2)
	next

bit7c:	lbu $2,regc(regs)			| CB79 BIT 7,C
	andi $2,$2,0x80
	bit($2)
	next

bit7d:	lbu $2,regd(regs)			| CB7A BIT 7,D
	andi $2,$2,0x80
	bit($2)
	next

bit7e:	lbu $2,rege(regs)			| CB7B BIT 7,E
	andi $2,$2,0x80
	bit($2)
	next

bit7h:	lbu $2,regh(regs)			| CB7C BIT 7,H
	andi $2,$2,0x80
	bit($2)
	next

bit7l:	lbu $2,regl(regs)			| CB7D BIT 7,L
	andi $2,$2,0x80
	bit($2)
	next

bit7m:	lhu $3,regh(regs)			| CB7E BIT 7,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0x80
	bit($2)
	next

bit7a:	andi $2,rega,0x80			| CB7F BIT 7,A
	bit($2)
	next

res0b:	lbu $2,regb(regs)			| CB80 RES 0,B
	andi $2,$2,0xFE
	sb $2,regb(regs)
	next

res0c:	lbu $2,regc(regs)			| CB81 RES 0,C
	andi $2,$2,0xFE
	sb $2,regc(regs)
	next

res0d:	lbu $2,regd(regs)			| CB82 RES 0,D
	andi $2,$2,0xFE
	sb $2,regd(regs)
	next

res0e:	lbu $2,rege(regs)			| CB83 RES 0,E
	andi $2,$2,0xFE
	sb $2,rege(regs)
	next

res0h:	lbu $2,regh(regs)			| CB84 RES 0,H
	andi $2,$2,0xFE
	sb $2,regh(regs)
	next

res0l:	lbu $2,regl(regs)			| CB85 RES 0,L
	andi $2,$2,0xFE
	sb $2,regl(regs)
	next

res0m:	lhu $3,regh(regs)			| CB86 RES 0,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0xFE
	sb $2,0($3)
	next

res0a:	andi rega,rega,0xFE			| CB87 RES 0,A
	next

res1b:	lbu $2,regb(regs)			| CB88 RES 1,B
	andi $2,$2,0xFD
	sb $2,regb(regs)
	next

res1c:	lbu $2,regc(regs)			| CB89 RES 1,C
	andi $2,$2,0xFD
	sb $2,regc(regs)
	next

res1d:	lbu $2,regd(regs)			| CB8A RES 1,D
	andi $2,$2,0xFD
	sb $2,regd(regs)
	next

res1e:	lbu $2,rege(regs)			| CB8B RES 1,E
	andi $2,$2,0xFD
	sb $2,rege(regs)
	next

res1h:	lbu $2,regh(regs)			| CB8C RES 1,H
	andi $2,$2,0xFD
	sb $2,regh(regs)
	next

res1l:	lbu $2,regl(regs)			| CB8D RES 1,L
	andi $2,$2,0xFD
	sb $2,regl(regs)
	next

res1m:	lhu $3,regh(regs)			| CB8E RES 1,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0xFD
	sb $2,0($3)
	next

res1a:	andi rega,rega,0xFD			| CB8F RES 1,A
	next

res2b:	lbu $2,regb(regs)			| CB90 RES 2,B
	andi $2,$2,0xFB
	sb $2,regb(regs)
	next

res2c:	lbu $2,regc(regs)			| CB91 RES 2,C
	andi $2,$2,0xFB
	sb $2,regc(regs)
	next

res2d:	lbu $2,regd(regs)			| CB92 RES 2,D
	andi $2,$2,0xFB
	sb $2,regd(regs)
	next

res2e:	lbu $2,rege(regs)			| CB93 RES 2,E
	andi $2,$2,0xFB
	sb $2,rege(regs)
	next

res2h:	lbu $2,regh(regs)			| CB94 RES 2,H
	andi $2,$2,0xFB
	sb $2,regh(regs)
	next

res2l:	lbu $2,regl(regs)			| CB95 RES 2,L
	andi $2,$2,0xFB
	sb $2,regl(regs)
	next

res2m:	lhu $3,regh(regs)			| CB96 RES 2,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0xFB
	sb $2,0($3)
	next

res2a:	andi rega,rega,0xFB			| CB97 RES 2,A
	next

res3b:	lbu $2,regb(regs)			| CB98 RES 3,B
	andi $2,$2,0xF7
	sb $2,regb(regs)
	next

res3c:	lbu $2,regc(regs)			| CB99 RES 3,C
	andi $2,$2,0xF7
	sb $2,regc(regs)
	next

res3d:	lbu $2,regd(regs)			| CB9A RES 3,D
	andi $2,$2,0xF7
	sb $2,regd(regs)
	next

res3e:	lbu $2,rege(regs)			| CB9B RES 3,E
	andi $2,$2,0xF7
	sb $2,rege(regs)
	next

res3h:	lbu $2,regh(regs)			| CB9C RES 3,H
	andi $2,$2,0xF7
	sb $2,regh(regs)
	next

res3l:	lbu $2,regl(regs)			| CB9D RES 3,L
	andi $2,$2,0xF7
	sb $2,regl(regs)
	next

res3m:	lhu $3,regh(regs)			| CB9E RES 3,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0xF7
	sb $2,0($3)
	next

res3a:	andi rega,rega,0xF7	 		| CB9F RES 3,A
	next

res4b:	lbu $2,regb(regs)			| CBA0 RES 4,B
	andi $2,$2,0xEF
	sb $2,regb(regs)
	next

res4c:	lbu $2,regc(regs)			| CBA1 RES 4,C
	andi $2,$2,0xEF
	sb $2,regc(regs)
	next

res4d:	lbu $2,regd(regs)			| CBA2 RES 4,D
	andi $2,$2,0xEF
	sb $2,regd(regs)
	next

res4e:	lbu $2,rege(regs)			| CBA3 RES 4,E
	andi $2,$2,0xEF
	sb $2,rege(regs)
	next

res4h:	lbu $2,regh(regs)			| CBA4 RES 4,H
	andi $2,$2,0xEF
	sb $2,regh(regs)
	next

res4l:	lbu $2,regl(regs)			| CBA5 RES 4,L
	andi $2,$2,0xEF
	sb $2,regl(regs)
	next

res4m:	lhu $3,regh(regs)			| CBA6 RES 4,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0xEF
	sb $2,0($3)
	next

res4a:	andi rega,rega,0xEF	 		| CBA7 RES 4,A
	next

res5b:	lbu $2,regb(regs)			| CBA8 RES 5,B
	andi $2,$2,0xDF
	sb $2,regb(regs)
	next

res5c:	lbu $2,regc(regs)			| CBA9 RES 5,C
	andi $2,$2,0xDF
	sb $2,regc(regs)
	next

res5d:	lbu $2,regd(regs)			| CBAA RES 5,D
	andi $2,$2,0xDF
	sb $2,regd(regs)
	next

res5e:	lbu $2,rege(regs)			| CBAB RES 5,E
	andi $2,$2,0xDF
	sb $2,rege(regs)
	next

res5h:	lbu $2,regh(regs)			| CBAC RES 5,H
	andi $2,$2,0xDF
	sb $2,regh(regs)
	next

res5l:	lbu $2,regl(regs)			| CBAD RES 5,L
	andi $2,$2,0xDF
	sb $2,regl(regs)
	next

res5m:	lhu $3,regh(regs)			| CBAE RES 5,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0xDF
	sb $2,0($3)
	next

res5a:	andi rega,rega,0xDF	 		| CBAF RES 5,A
	next

res6b:	lbu $2,regb(regs)			| CBB0 RES 6,B
	andi $2,$2,0xBF
	sb $2,regb(regs)
	next

res6c:	lbu $2,regc(regs)			| CBB1 RES 6,C
	andi $2,$2,0xBF
	sb $2,regc(regs)
	next

res6d:	lbu $2,regd(regs)			| CBB2 RES 6,D
	andi $2,$2,0xBF
	sb $2,regd(regs)
	next

res6e:	lbu $2,rege(regs)			| CBB3 RES 6,E
	andi $2,$2,0xBF
	sb $2,rege(regs)
	next

res6h:	lbu $2,regh(regs)			| CBB4 RES 6,H
	andi $2,$2,0xBF
	sb $2,regh(regs)
	next

res6l:	lbu $2,regl(regs)			| CBB5 RES 6,L
	andi $2,$2,0xBF
	sb $2,regl(regs)
	next

res6m:	lhu $3,regh(regs)			| CBB6 RES 6,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0xBF
	sb $2,0($3)
	next

res6a:	andi rega,rega,0xBF	 		| CBB7 RES 6,A
	next

res7b:	lbu $2,regb(regs)			| CBB8 RES 7,B
	andi $2,$2,0x7F
	sb $2,regb(regs)
	next

res7c:	lbu $2,regc(regs)			| CBB9 RES 7,C
	andi $2,$2,0x7F
	sb $2,regc(regs)
	next

res7d:	lbu $2,regd(regs)			| CBBA RES 7,D
	andi $2,$2,0x7F
	sb $2,regd(regs)
	next

res7e:	lbu $2,rege(regs)			| CBBB RES 7,E
	andi $2,$2,0x7F
	sb $2,rege(regs)
	next

res7h:	lbu $2,regh(regs)			| CBBC RES 7,H
	andi $2,$2,0x7F
	sb $2,regh(regs)
	next

res7l:	lbu $2,regl(regs)			| CBBD RES 7,L
	andi $2,$2,0x7F
	sb $2,regl(regs)
	next

res7m:	lhu $3,regh(regs)			| CBBE RES 7,M
	addu $3,$3,targbase
	lbu $2,0($3)
	andi $2,$2,0x7F
	sb $2,0($3)
	next

res7a:	andi rega,rega,0x7F	 		| CBBF RES 7,A
	next

set0b:	lbu $2,regb(regs)			| CBC0 SET 0,B
	ori $2,$2,1
	sb $2,regb(regs)
	next

set0c:	lbu $2,regc(regs)			| CBC1 SET 0,C
	ori $2,$2,1
	sb $2,regc(regs)
	next

set0d:	lbu $2,regd(regs)			| CBC2 SET 0,D
	ori $2,$2,1
	sb $2,regd(regs)
	next

set0e:	lbu $2,rege(regs)			| CBC3 SET 0,E
	ori $2,$2,1
	sb $2,rege(regs)
	next

set0h:	lbu $2,regh(regs)			| CBC4 SET 0,H
	ori $2,$2,1
	sb $2,regh(regs)
	next

set0l:	lbu $2,regl(regs)			| CBC5 SET 0,L
	ori $2,$2,1
	sb $2,regl(regs)
	next

set0m:	lhu $3,regh(regs)			| CBC6 SET 0,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,1
	sb $2,0($3)
	next

set0a:	ori rega,rega,1		 		| CBC7 SET 0,A
	next

set1b:	lbu $2,regb(regs)			| CBC8 SET 1,B
	ori $2,$2,2
	sb $2,regb(regs)
	next

set1c:	lbu $2,regc(regs)			| CBC9 SET 1,C
	ori $2,$2,2
	sb $2,regc(regs)
	next

set1d:	lbu $2,regd(regs)			| CBCA SET 1,D
	ori $2,$2,2
	sb $2,regd(regs)
	next

set1e:	lbu $2,rege(regs)			| CBCB SET 1,E
	ori $2,$2,2
	sb $2,rege(regs)
	next

set1h:	lbu $2,regh(regs)			| CBCC SET 1,H
	ori $2,$2,2
	sb $2,regh(regs)
	next

set1l:	lbu $2,regl(regs)			| CBCD SET 1,L
	ori $2,$2,2
	sb $2,regl(regs)
	next

set1m:	lhu $3,regh(regs)			| CBCE SET 1,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,2
	sb $2,0($3)
	next

set1a:	ori rega,rega,2		 		| CBCF SET 1,A
	next

set2b:	lbu $2,regb(regs)			| CBD0 SET 2,B
	ori $2,$2,4
	sb $2,regb(regs)
	next

set2c:	lbu $2,regc(regs)			| CBD1 SET 2,C
	ori $2,$2,4
	sb $2,regc(regs)
	next

set2d:	lbu $2,regd(regs)			| CBD2 SET 2,D
	ori $2,$2,4
	sb $2,regd(regs)
	next

set2e:	lbu $2,rege(regs)			| CBD3 SET 2,E
	ori $2,$2,4
	sb $2,rege(regs)
	next

set2h:	lbu $2,regh(regs)			| CBD4 SET 2,H
	ori $2,$2,4
	sb $2,regh(regs)
	next

set2l:	lbu $2,regl(regs)			| CBD5 SET 2,L
	ori $2,$2,4
	sb $2,regl(regs)
	next

set2m:	lhu $3,regh(regs)			| CBD6 SET 2,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,4
	sb $2,0($3)
	next

set2a:	ori rega,rega,4		 		| CBD7 SET 2,A
	next

set3b:	lbu $2,regb(regs)			| CBD8 SET 3,B
	ori $2,$2,8
	sb $2,regb(regs)
	next

set3c:	lbu $2,regc(regs)			| CBD9 SET 3,C
	ori $2,$2,8
	sb $2,regc(regs)
	next

set3d:	lbu $2,regd(regs)			| CBDA SET 3,D
	ori $2,$2,8
	sb $2,regd(regs)
	next

set3e:	lbu $2,rege(regs)			| CBDB SET 3,E
	ori $2,$2,8
	sb $2,rege(regs)
	next

set3h:	lbu $2,regh(regs)			| CBDC SET 3,H
	ori $2,$2,8
	sb $2,regh(regs)
	next

set3l:	lbu $2,regl(regs)			| CBDD SET 3,L
	ori $2,$2,8
	sb $2,regl(regs)
	next

set3m:	lhu $3,regh(regs)			| CBDE SET 3,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,8
	sb $2,0($3)
	next

set3a:	ori rega,rega,8		 		| CBDF SET 3,A
	next

set4b:	lbu $2,regb(regs)			| CBE0 SET 4,B
	ori $2,$2,0x10
	sb $2,regb(regs)
	next

set4c:	lbu $2,regc(regs)			| CBE1 SET 4,C
	ori $2,$2,0x10
	sb $2,regc(regs)
	next

set4d:	lbu $2,regd(regs)			| CBE2 SET 4,D
	ori $2,$2,0x10
	sb $2,regd(regs)
	next

set4e:	lbu $2,rege(regs)			| CBE3 SET 4,E
	ori $2,$2,0x10
	sb $2,rege(regs)
	next

set4h:	lbu $2,regh(regs)			| CBE4 SET 4,H
	ori $2,$2,0x10
	sb $2,regh(regs)
	next

set4l:	lbu $2,regl(regs)			| CBE5 SET 4,L
	ori $2,$2,0x10
	sb $2,regl(regs)
	next

set4m:	lhu $3,regh(regs)			| CBE6 SET 4,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,0x10
	sb $2,0($3)
	next

set4a:	ori rega,rega,0x10	 		| CBE7 SET 4,A
	next

set5b:	lbu $2,regb(regs)			| CBE8 SET 5,B
	ori $2,$2,0x20
	sb $2,regb(regs)
	next

set5c:	lbu $2,regc(regs)			| CBE9 SET 5,C
	ori $2,$2,0x20
	sb $2,regc(regs)
	next

set5d:	lbu $2,regd(regs)			| CBEA SET 5,D
	ori $2,$2,0x20
	sb $2,regd(regs)
	next

set5e:	lbu $2,rege(regs)			| CBEB SET 5,E
	ori $2,$2,0x20
	sb $2,rege(regs)
	next

set5h:	lbu $2,regh(regs)			| CBEC SET 5,H
	ori $2,$2,0x20
	sb $2,regh(regs)
	next

set5l:	lbu $2,regl(regs)			| CBED SET 5,L
	ori $2,$2,0x20
	sb $2,regl(regs)
	next

set5m:	lhu $3,regh(regs)			| CBEE SET 5,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,0x20
	sb $2,0($3)
	next

set5a:	ori rega,rega,0x20	 		| CBEF SET 5,A
	next

set6b:	lbu $2,regb(regs)			| CBF0 SET 6,B
	ori $2,$2,0x40
	sb $2,regb(regs)
	next

set6c:	lbu $2,regc(regs)			| CBF1 SET 6,C
	ori $2,$2,0x40
	sb $2,regc(regs)
	next

set6d:	lbu $2,regd(regs)			| CBF2 SET 6,D
	ori $2,$2,0x40
	sb $2,regd(regs)
	next

set6e:	lbu $2,rege(regs)			| CBF3 SET 6,E
	ori $2,$2,0x40
	sb $2,rege(regs)
	next

set6h:	lbu $2,regh(regs)			| CBF4 SET 6,H
	ori $2,$2,0x40
	sb $2,regh(regs)
	next

set6l:	lbu $2,regl(regs)			| CBF5 SET 6,L
	ori $2,$2,0x40
	sb $2,regl(regs)
	next

set6m:	lhu $3,regh(regs)			| CBF6 SET 6,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,0x40
	sb $2,0($3)
	next

set6a:	ori rega,rega,0x40	 		| CBF7 SET 6,A
	next

set7b:	lbu $2,regb(regs)			| CBF8 SET 7,B
	ori $2,$2,0x80
	sb $2,regb(regs)
	next

set7c:	lbu $2,regc(regs)			| CBF9 SET 7,C
	ori $2,$2,0x80
	sb $2,regc(regs)
	next

set7d:	lbu $2,regd(regs)			| CBFA SET 7,D
	ori $2,$2,0x80
	sb $2,regd(regs)
	next

set7e:	lbu $2,rege(regs)			| CBFB SET 7,E
	ori $2,$2,0x80
	sb $2,rege(regs)
	next

set7h:	lbu $2,regh(regs)			| CBFC SET 7,H
	ori $2,$2,0x80
	sb $2,regh(regs)
	next

set7l:	lbu $2,regl(regs)			| CBFD SET 7,L
	ori $2,$2,0x80
	sb $2,regl(regs)
	next

set7m:	lhu $3,regh(regs)			| CBFE SET 7,M
	addu $3,$3,targbase
	lbu $2,0($3)
	ori $2,$2,0x80
	sb $2,0($3)
	next

set7a:	ori rega,rega,0x80	 		| CBFF SET 7,A
	next

dadixb:	lhu $2,regb(regs)			| DD09 DAD IX,B
	lhu $3,regix(regs)
	addu $3,$3,$2
	sh $3,regix(regs)
	carryf($3)
	next

dadixd:	lhu $2,regd(regs)			| DD19 DAD IX,D
	lhu $3,regix(regs)
	addu $3,$3,$2
	sh $3,regix(regs)
	carryf($3)
	next

lxiix:	lbu $3,0(pseudopc)			| DD21 LXI IX,nnnn
	sb $3,regxl(regs)
	lbu $3,1(pseudopc)
	addiu pseudopc,pseudopc,2
	sb $3,regxh(regs)
	next

sixd:	getaddr2(pseudopc)			| DD22 SIXD addr
	addu $3,$3,targbase
	lbu $2,regxl(regs)
	sb $2,0($3)
	lbu $2,regxh(regs)
	sb $2,1($3)
	next

inxix:	lhu $3,regix(regs)			| DD23 INX IX
	addu $3,$3,regcon01
	sh $3,regix(regs)
	next

inrxh:	lbu $3,regxh(regs)			| DD24 INR XH (undocumented)
	inrflag($3)
	sb $3,regxh(regs)
	next

dcrxh:	lbu $3,regxh(regs)			| DD25 DCR XH (undocumented)
	dcrflag($3)
	sb $3,regxh(regs)
	next

mvixh:	lbu $3,0(pseudopc)			| DD26 MVI XH,nn (undocumented)
	addu pseudopc,pseudopc,regcon01
	sb $3,regxh(regs)
	next

dadixx:	lhu $3,regix(regs)			| DD29 DAD IX,IX (mult by 2)
	addu $3,$3,$3
	sh $3,regix(regs)
	carryf($3)
	next

lixd:	getaddr2(pseudopc)			| DD2A LIXD addr
	addu $3,$3,targbase
	lbu $2,0($3)
	sb $2,regxl(regs)
	lbu $2,1($3)
	sb $2,regxh(regs)
	next

dcxix:	lhu $3,regix(regs)			| DD2B DCX IX
	subu $3,$3,regcon01
	sh $3,regix(regs)
	next

inrxl:	lbu $3,regxl(regs)			| DD2C INR XL (undocumented)
	inrflag($3)
	sb $3,regxl(regs)
	next

dcrxl:	lbu $3,regxl(regs)			| DD2D DCR XL (undocumented)
	dcrflag($3)
	sb $3,regxl(regs)
	next

mvixl:	lbu $3,0(pseudopc)			| DD2E MVI XL,nn (undocumented)
	addu pseudopc,pseudopc,regcon01
	sb $3,regxl(regs)
	next

inrix:	calcind(regix)				| DD34 INR (IX+d)
	addu $1,targbase,$2
	lbu $3,0($1)
	inrflag($3)
	sb $3,0($1)
	next

dcrix:	calcind(regix)				| DD35 DCR (IX+d)
	addu $1,targbase,$2
	lbu $3,0($1)
	dcrflag($3)
	sb $3,0($1)
	next

mviix:	calcind(regix)				| DD36 MVI (IX+d),nn
	addu $2,targbase,$2
	lbu $3,0(pseudopc)
	addu pseudopc,pseudopc,regcon01
	sb $3,0($2)
	next

dadixs:	subu $2,pseudosp,targbase		| DD39 DAD IX,SP
	lhu $3,regix(regs)
	addu $3,$3,$2
	sh $3,regix(regs)
	carryf($3)
	next

movbxh:	lbu $3,regxh(regs)			| DD44 MOV B,XH (undocumented)
	sb $3,regb(regs)
	next

movbxl:	lbu $3,regxl(regs)			| DD45 MOV B,XL (undocumented)
	sb $3,regb(regs)
	next

movbix:	calcind(regix)				| DD46 MOV B,(IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regb(regs)
	next

movcxh:	lbu $3,regxh(regs)			| DD4C MOV C,XH (undocumented)
	sb $3,regc(regs)
	next

movcxl:	lbu $3,regxl(regs)			| DD4D MOV C,XL (undocumented)
	sb $3,regc(regs)
	next

movcix:	calcind(regix)				| DD4E MOV C,(IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regc(regs)
	next

movdxh:	lbu $3,regxh(regs)			| DD54 MOV D,XH (undocumented)
	sb $3,regd(regs)
	next

movdxl:	lbu $3,regxl(regs)			| DD55 MOV D,XL (undocumented)
	sb $3,regd(regs)
	next

movdix:	calcind(regix)				| DD56 MOV D,(IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regd(regs)
	next

movexh:	lbu $3,regxh(regs)			| DD5C MOV E,XH (undocumented)
	sb $3,rege(regs)
	next

movexl:	lbu $3,regxl(regs)			| DD5D MOV E,XL (undocumented)
	sb $3,rege(regs)
	next

moveix:	calcind(regix)				| DD5E MOV E,(IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,rege(regs)
	next

movxhb:	lbu $3,regb(regs)			| DD60 MOV XH,B (undocumented)
	sb $3,regxh(regs)
	next

movxhc:	lbu $3,regc(regs)			| DD61 MOV XH,C (undocumented)
	sb $3,regxh(regs)
	next

movxhd:	lbu $3,regd(regs)			| DD62 MOV XH,D (undocumented)
	sb $3,regxh(regs)
	next

movxhe:	lbu $3,rege(regs)			| DD63 MOV XH,E (undocumented)
	sb $3,regxh(regs)
	next

mvxhxh:	next					| DD64 MOV XH,XH (undocumented)

mvxhxl:	lbu $3,regxl(regs)			| DD65 MOV XH,XL (undocumented)
	sb $3,regxh(regs)
	next

movhix:	calcind(regix)				| DD66 MOV H,(IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regh(regs)
	next

movxha:	sb rega,regxh(regs)			| DD67 MOV XH,A (undocumented)
	next

movxlb:	lbu $3,regb(regs)			| DD68 MOV XL,B (undocumented)
	sb $3,regxl(regs)
	next

movxlc:	lbu $3,regc(regs)			| DD69 MOV XL,C (undocumented)
	sb $3,regxl(regs)
	next

movxld:	lbu $3,regd(regs)			| DD6A MOV XL,D (undocumented)
	sb $3,regxl(regs)
	next

movxle:	lbu $3,rege(regs)			| DD6B MOV XL,E (undocumented)
	sb $3,regxl(regs)
	next

mvxlxh:	lbu $3,regxh(regs)			| DD6C MOV XL,XH (undocumented)
	sb $3,regxl(regs)
	next

mvxlxl:	next					| DD6D MOV XL,XL (undocumented)

movlix:	calcind(regix)				| DD6E MOV L,(IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regl(regs)
	next

movxla:	sb rega,regxl(regs)			| DD6F MOV XL,A (undocumented)
	next

movixb:	calcind(regix)				| DD70 MOV (IX+d),B
	addu $2,targbase,$2
	lbu $3,regb(regs)
	sb $3,0($2)
	next

movixc:	calcind(regix)				| DD71 MOV (IX+d),C
	addu $2,targbase,$2
	lbu $3,regc(regs)
	sb $3,0($2)
	next

movixd:	calcind(regix)				| DD72 MOV (IX+d),D
	addu $2,targbase,$2
	lbu $3,regd(regs)
	sb $3,0($2)
	next

movixe:	calcind(regix)				| DD73 MOV (IX+d),E
	addu $2,targbase,$2
	lbu $3,rege(regs)
	sb $3,0($2)
	next

movixh:	calcind(regix)				| DD74 MOV (IX+d),H
	addu $2,targbase,$2
	lbu $3,regh(regs)
	sb $3,0($2)
	next

movixl:	calcind(regix)				| DD75 MOV (IX+d),L
	addu $2,targbase,$2
	lbu $3,regl(regs)
	sb $3,0($2)
	next

movixa:	calcind(regix)				| DD77 MOV (IX+d),A
	addu $2,targbase,$2
	sb rega,0($2)
	next

movaxh:	lbu rega,regxh(regs)			| DD7C MOV A,XH (undocumented)
	next

movaxl:	lbu rega,regxl(regs)			| DD7D MOV A,XL (undocumented)
	next

movaix:	calcind(regix)				| DD7E MOV A,(IX+d)
	addu $2,targbase,$2
	lbu rega,0($2)
	next

addxh:	lbu $3,regxh(regs)			| DD84 ADD XH (undocumented)
	addflags
	next

addxl:	lbu $3,regxl(regs)			| DD85 ADD XL (undocumented)
	addflags
	next

addix:	calcind(regix)				| DD86 ADD (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	addflags
	next

adcxh:	lbu $3,regxh(regs)			| DD8C ADC XH (undocumented)
	adcflags
	next

adcxl:	lbu $3,regxl(regs)			| DD8E ADC XL (undocumented)
	adcflags
	next

adcix:	calcind(regix)				| DD8E ADC (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	adcflags
	next
	
subxh:	lbu $3,regxh(regs)			| DD94 SUB XH (undocumented)
	subflags
	next

subxl:	lbu $3,regxl(regs)			| DD95 SUB XL (undocumented)
	subflags
	next

subix:	calcind(regix)				| DD96 SUB (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	subflags
	next

sbbxh:	lbu $3,regxh(regs)	 		| DD9C SBB XH (undocumented)
	sbbflags
	next

sbbxl:	lbu $3,regxl(regs)	 		| DD9D SBB XL (undocumented)
	sbbflags
	next

sbbix:	calcind(regix)				| DD9E SBB (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sbbflags
	next

anaxh:	lbu $3,regxh(regs)			| DDA4 ANA XH (undocumented)
	and rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

anaxl:	lbu $3,regxl(regs)			| DDA5 ANA XL (undocumented)
	and rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

anaix:	calcind(regix)				| DDA6 ANA (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	and rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

xraxh:	lbu $3,regxh(regs)			| DDAC XRA XH (undocumented)
	xor rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

xraxl:	lbu $3,regxl(regs)			| DDAD XRA XL (undocumented)
	xor rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

xraix:	calcind(regix)				| DDAE XRA (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	xor rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

oraxh:	lbu $3,regxh(regs)			| DDB4 ORA XH (undocumented)
	or rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

oraxl:	lbu $3,regxl(regs)			| DDB5 ORA XL (undocumented)
	or rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

oraix:	calcind(regix)				| DDB6 ORA (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	or rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

cmpxh:	lbu $3,regxh(regs)			| DDBC CMP XH (undocumented)
	cmpflags
	next

cmpxl:	lbu $3,regxl(regs)			| DDBD CMP XL (undocumented)
	cmpflags
	next

rlcix:	addu $2,targbase,$2			| DDCBdd06 RLC (IX+d)
	lbu $3,0($2)
	RLCR($3)
	sb $3,0($2)
	setapflags($3)
	next

rrcix:	addu $2,targbase,$2			| DDCBdd0E RRC (IX+d)
	lbu $3,0($2)
	RRCR($3)
	sb $3,0($2)
	setapflags($3)
	next

rlix:	addu $2,targbase,$2			| DDCBdd16 RL (IX+d)
	lbu $3,0($2)
	RALR($3)
	andi $3,$3,0xFF
	sb $3,0($2)
	setapflags($3)
	next

rrix:	addu $2,targbase,$2			| DDCBdd1E RR (IX+d)
	lbu $3,0($2)
	RARR($3)
	sb $3,0($2)
	setapflags($3)
	next

slaix:	addu $2,targbase,$2			| DDCBdd26 SLA (IX+d)
	lbu $3,0($2)
	SLAR($3)
	sb $3,0($2)
	setapflags($3)
	next

sraix:	addu $2,targbase,$2			| DDCBdd2E SRA (IX+d)
	lbu $3,0($2)
	SRAR($3)
	sb $3,0($2)
	setapflags($3)
	next

srlix:	addu $2,targbase,$2			| DDCBdd3E SRL (IX+d)
	lbu $3,0($2)
	SRLR($3)
	sb $3,0($2)
	setapflags($3)
	next

bit0ix:	addu $2,targbase,$2			| DDCBdd46 BIT 0,(IX+d)
	lbu $3,0($2)
	andi $3,$3,1
	bit($3)
	next

bit1ix:	addu $2,targbase,$2			| DDCBdd4E BIT 1,(IX+d)
	lbu $3,0($2)
	andi $3,$3,2
	bit($3)
	next

bit2ix:	addu $2,targbase,$2			| DDCBdd56 BIT 2,(IX+d)
	lbu $3,0($2)
	andi $3,$3,4
	bit($3)
	next

bit3ix:	addu $2,targbase,$2			| DDCBdd5E BIT 3,(IX+d)
	lbu $3,0($2)
	andi $3,$3,8
	bit($3)
	next

bit4ix:	addu $2,targbase,$2			| DDCBdd66 BIT 4,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0x10
	bit($3)
	next

bit5ix:	addu $2,targbase,$2			| DDCBdd6E BIT 5,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0x20
	bit($3)
	next

bit6ix:	addu $2,targbase,$2			| DDCBdd76 BIT 6,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0x40
	bit($3)
	next

bit7ix:	addu $2,targbase,$2			| DDCBdd7E BIT 7,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0x80
	bit($3)
	next

res0ix:	addu $2,targbase,$2			| DDCBdd86 RES 0,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0xFE
	sb $3,0($2)
	next

res1ix:	addu $2,targbase,$2			| DDCBdd8E RES 1,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0xFD
	sb $3,0($2)
	next

res2ix:	addu $2,targbase,$2			| DDCBdd96 RES 2,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0xFB
	sb $3,0($2)
	next

res3ix:	addu $2,targbase,$2			| DDCBdd9E RES 3,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0xF7
	sb $3,0($2)
	next

res4ix:	addu $2,targbase,$2			| DDCBddA6 RES 4,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0xEF
	sb $3,0($2)
	next

res5ix:	addu $2,targbase,$2			| DDCBddAE RES 5,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0xDF
	sb $3,0($2)
	next

res6ix:	addu $2,targbase,$2			| DDCBddB6 RES 6,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0xBF
	sb $3,0($2)
	next

res7ix:	addu $2,targbase,$2			| DDCBddBE RES 7,(IX+d)
	lbu $3,0($2)
	andi $3,$3,0x7F
	sb $3,0($2)
	next

set0ix:	addu $2,targbase,$2			| DDCBddC6 SET 0,(IX+d)
	lbu $3,0($2)
	ori $3,$3,1
	sb $3,0($2)
	next

set1ix:	addu $2,targbase,$2			| DDCBddCE SET 1,(IX+d)
	lbu $3,0($2)
	ori $3,$3,2
	sb $3,0($2)
	next

set2ix:	addu $2,targbase,$2			| DDCBddD6 SET 2,(IX+d)
	lbu $3,0($2)
	ori $3,$3,4
	sb $3,0($2)
	next

set3ix:	addu $2,targbase,$2			| DDCBddDE SET 3,(IX+d)
	lbu $3,0($2)
	ori $3,$3,8
	sb $3,0($2)
	next

set4ix:	addu $2,targbase,$2			| DDCBddE6 SET 4,(IX+d)
	lbu $3,0($2)
	ori $3,$3,0x10
	sb $3,0($2)
	next

set5ix:	addu $2,targbase,$2			| DDCBddEE SET 5,(IX+d)
	lbu $3,0($2)
	ori $3,$3,0x20
	sb $3,0($2)
	next

set6ix:	addu $2,targbase,$2			| DDCBddF6 SET 6,(IX+d)
	lbu $3,0($2)
	ori $3,$3,0x40
	sb $3,0($2)
	next

set7ix:	addu $2,targbase,$2			| DDCBddFE SET 7,(IX+d)
	lbu $3,0($2)
	ori $3,$3,0x80
	sb $3,0($2)
	next

cmpix:	calcind(regix)				| DDBE CMP (IX+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	cmpflags
	next

popix:	lbu $3,0(pseudosp)			| DDE1 POP IX
	sb $3,regxl(regs)
	lbu $3,1(pseudosp)
	addiu pseudosp,pseudosp,2
	sb $3,regxh(regs)
	next

xtix:	lbu $2,regxh(regs)			| DDE3 XTIX
	lbu $3,0(pseudosp)
	sb $2,0(pseudosp)
	sb $3,regxh(regs)
	lbu $2,regxl(regs)
	lbu $3,1(pseudosp)
	sb $2,1(pseudosp)
	sb $3,regxl(regs)

pushix:	lbu $3,regxh(regs)			| DDE5 PUSH IX
	sb $3,-1(pseudosp)
	lbu $3,regxl(regs)
	sb $3,-2(pseudosp)
	addiu pseudosp,pseudosp,-2
	next

pcix:	lhu $3,regix(regs)			| DDE9 PCIX
	addu pseudopc,targbase,$3
	next

spix:	lhu $3,regix(regs)			| DDF9 SPIX
	addu pseudosp,targbase,$3
	next

inbc:	lbu $2,regc(regs)			| ED40 IN B,(C)
	addiu $3,regs,regb
	move ret1,$ra
	jal inp
	move $ra,ret1
	next

outcb:	lbu $2,regc(regs)			| ED41 OUT (C),B
	addiu $3,regs,regb
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

|_svf:	andc $2,$3,$4   |  s,  d
|	andc $3,$4,$3   |  d,  s
|	and $2,$2,$5    |  r
|	andc $5,$3,$5   |  r
|	or $3,$5,$2
|	jr $ra
|	nop

dsbbb:	lhu $2,regb(regs)			| ED42 DSBB B
dsbbr2:	lhu $3,regh(regs)
	nor $4,$0,$3		| SVF setup
	and $4,$2,$4		|  "
	nor $5,$0,$2		|  "
	and $5,$3,$5		|  "
	subu $3,$3,$2
	and regf,regf,regcon01
	subu $3,$3,regf
	sh $3,regh(regs)	| Difference
	srl regf,$3,8
	andi regf,regf,0x80	| Sign
	srl $1,$3,16		| Borrow
	or regf,regf,$1
	andi $3,$3,0xFFFF
	slt $1,$3,regcon01	| Zero
	sll $1,$1,6
	or regf,regf,$1
	and $4,$4,$3		| SVF calculation
	nor $3,$0,$3		|  "
	and $3,$5,$3		|  "
	or $3,$3,$4		|  "
	srl $3,$3,13
	andi $3,$3,4
	or regf,regf,$3		| Overflow
	ori regf,regf,2		| Subtract
	next

sbcd:	getaddr2(pseudopc)			| ED43 SBCD addr
	addu $3,$3,targbase
	lbu $2,regb(regs)
	sb $2,1($3)
	lbu $2,regc(regs)
	sb $2,0($3)
	next

nega:	andi $3,rega,0xFF			| ED44 NEG
	xori $3,$3,0xFF
	move rega,regcon01
	addflags
	next

retn:	getaddr2(pseudosp)			| ED45 RETN (treated as RET)
	addu pseudopc,targbase,$3
	subu pseudopc,pseudopc,regcon01
	next

im0:	next					| ED46 IM0 (set 8080 int mode)

moveia:	sb rega,regi(regs)		 	| ED47 MOV I,A
	next

incc:	lbu $2,regc(regs)			| ED48 IN C,(C)
	addiu $3,regs,regc
	move ret1,$ra
	jal inp
	move $ra,ret1
	next

outcc:	lbu $2,regc(regs)			| ED49 OUT (C),C
	addiu $3,regs,regc
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

|_avf:	nor $2,$3,$4    |  s,  d
|	and $3,$3,$4    |  s,  d
|	and $2,$2,$5    |  r
|	andc $5,$3,$5   |  r
|	or $3,$5,$2
|	jr $ra
|	nop

dadcb:	lhu $2,regb(regs)			| ED4A DADC B
dadcr2:	lhu $3,regh(regs)
	nor $4,$2,$3		| AVF setup
	and $5,$3,$2		|  "
	addu $3,$3,$2
	and regf,regf,regcon01
	addu $3,$3,regf
	sh $3,regh(regs)	| Sum
	srl regf,$3,8
	andi regf,regf,0x80	| Sign
	srl $1,$3,16		| Carry
	or regf,regf,$1
	andi $3,$3,0xFFFF
	slt $1,$3,regcon01	| Zero
	sll $1,$1,6
	or regf,regf,$1
	and $4,$4,$3		| AVF calculation
	nor $3,$3,$0		|  "
	and $3,$5,$3		|  "
	or $3,$3,$4		|  "
	srl $3,$3,13
	andi $3,$3,4
	or regf,regf,$3		| Overflow
	next

lbcd:	getaddr2(pseudopc)			| ED4B LBCD addr
	addu $3,$3,targbase
	lbu $2,0($3)
	sb $2,regc(regs)
	lbu $2,1($3)
	sb $2,regb(regs)
	next

reti:	getaddr2(pseudosp)			| ED4D RETI (treated as RET)
	addu pseudopc,targbase,$3
	subu pseudopc,pseudopc,regcon01
	next

movera:	sb rega,regr(regs)			| ED4F MOV R,A
	next

indc:	lbu $2,regc(regs)			| ED50 IN D,(C)
	addiu $3,regs,regd
	move ret1,$ra
	jal inp
	move $ra,ret1
	next

outcd:	lbu $2,regc(regs)			| ED51 OUT (C),D
	addiu $3,regs,regd
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

dsbbd:	lhu $2,regd(regs)			| ED52 DSBB D
	j dsbbr2

sded:	getaddr2(pseudopc)			| ED53 SDED addr
	addu $3,$3,targbase
	lbu $2,regd(regs)
	sb $2,1($3)
	lbu $2,rege(regs)
	sb $2,0($3)
	next

im1:	next					| ED56 IM1 (ignored)

moveai:	lbu rega,regi(regs)		 	| ED57 MOV A,I
	addu $2,aflagptr,rega
	lbu $2,0($2)
	andi $2,$2,0xFE
	and regf,regf,regcon01
	or regf,regf,$2
	lbu $2,regiff(regs)
	or regf,regf,$2
	next

inec:	lbu $2,regc(regs)			| ED58 IN E,(C)
	addiu $3,regs,rege
	move ret1,$ra
	jal inp
	move $ra,ret1
	next

outce:	lbu $2,regc(regs)			| ED59 OUT (C),E
	addiu $3,regs,rege
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

dadcd:	lhu $2,regd(regs)			| ED5A DADC D
	j dadcr2

lded:	getaddr2(pseudopc)			| ED5B LDED addr
	addu $3,$3,targbase
	lbu $2,0($3)
	sb $2,regd(regs)
	lbu $2,1($3)
	sb $2,rege(regs)
	next

im2:	next					| ED5E IM2 (ignored)

movear:	move ret1,$ra				| ED5F MOV A,R
	jal randlp
	move $ra,ret1
	andi rega,$2,0x7F
	lbu $2,regr(regs)
	andi $2,$2,0x80
	or rega,rega,$2
	addu $2,aflagptr,rega
	lbu $2,0($2)
	andi $2,$2,0xFE
	and regf,regf,regcon01
	or regf,regf,$2
	lbu $2,regiff(regs)
	or regf,regf,$2
	next

inhc:	lbu $2,regc(regs)			| ED60 IN H,(C)
	addiu $3,regs,regh
	move ret1,$ra
	jal inp
	move $ra,ret1
	next

outch:	lbu $2,regc(regs)			| ED61 OUT (C),H
	addiu $3,regs,regh
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

dsbbh:	lhu $2,regh(regs)			| ED62 DSBB H
	j dsbbr2
	next

rrd:	lhu $2,regh(regs)			| ED67 RRD
	addu $2,targbase,$2
	lbu $3,0($2)
	sll $1,rega,8
	or $1,$1,$3
	srl $1,$1,4
	sb $1,0($2)
	andi rega,rega,0xF0
	andi $3,$3,0x0F
	or rega,rega,$3
	setapflags(rega)
	next

inlc:	lbu $2,regc(regs)			| ED68 IN L,(C)
	addiu $3,regs,regl
	move ret1,$ra
	jal inp
	move $ra,ret1
	next

outcl:	lbu $2,regc(regs)			| ED69 OUT (C),L
	addiu $3,regs,regl
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

dadch:	lhu $2,regh(regs)			| ED6A DADC H
	j dadcr2

rld:	lhu $2,regh(regs)			| ED6F RLD
	addu $2,targbase,$2
	lbu $3,0($2)
	sll $3,$3,4
	andi $1,rega,0x0F
	or $3,$3,$1
	sb $3,0($2)
	srl $3,$3,8
	andi rega,rega,0xF0
	or rega,rega,$3
	setapflags(rega)
	next

inmc:	lbu $2,regc(regs)			| ED70 IN M,(C)
	lhu $3,regh(regs)
	addu $3,targbase,$3
	move ret1,$ra
	jal inp
	move $ra,ret1
	next

outcm:	lbu $2,regc(regs)			| ED71 OUT (C),M
	lhu $3,regh(regs)
	addu $3,targbase,$3
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

dsbbs:	subu $2,pseudosp,targbase		| ED72 DSBB SP
	j dsbbr2

sspd:	getaddr2(pseudopc)			| ED73 SSPD addr
	subu $2,pseudosp,targbase
	addu $3,targbase,$3
	sb $2,0($3)
	srl $2,$2,8
	sb $2,1($3)
	next

inac:	lbu $2,regc(regs)			| ED78 IN A,(C)
	addiu $3,regs,srega
	move ret1,$ra
	jal inp
	move $ra,ret1
	lbu rega,srega(regs)
	next

outca:	lbu $2,regc(regs)			| ED79 OUT (C),A
	sb rega,srega(regs)
	addiu $3,regs,srega
	move ret1,$ra
	jal outp
	move $ra,ret1
	next

dadcs:	subu $2,pseudosp,targbase		| ED7A DADC SP
	j dadcr2

lspd:	getaddr2(pseudopc)			| ED7B LSPD addr
	addu $3,targbase,$3
	lbu $2,0($3)
	lbu $3,1($3)
	sll $3,$3,8
	or $2,$2,$3
	addu pseudosp,targbase,$2
	next

ldi:	lhu $2,regh(regs)			| EDA0 LDI
	lhu $3,regd(regs)
	addu $2,targbase,$2
	addu $3,targbase,$3
	lbu $4,0($2)
	sb $4,0($3)
	addu $2,$2,regcon01
	sh $2,regh(regs)
	addu $3,$3,regcon01
	sh $3,regd(regs)
	lhu $2,regb(regs)
	addu $2,$2,regconm1
	sh $2,regb(regs)
	beq $2,$0,ldi2
	ori regf,regf,4
	andi regf,regf,0xED
	next
ldi2:	andi regf,regf,0xE9
	next

cmpii:	lhu $2,regh(regs)			| EDA1 CMPI (Z-80 mnem. is CPI)
	addu $3,targbase,$2
	lbu $3,0($3)
	and $4,regf,regcon01
	cmpflags
	addu $2,$2,regcon01
	sh $2,regh(regs)
	lhu $2,regb(regs)
	addu $2,$2,regconm1
	sh $2,regb(regs)
	andi regf,regf,0xFE
	or regf,regf,$4			| Restore CY
	beq $2,$0,cmpii2
	ori regf,regf,4
cmpii2:	next
	andi regf,regf,0xFB
	next

ini:	lbu $2,regc(regs)			| EDA2 INI
	lhu $3,regh(regs)
	addu $3,targbase,$3
	move ret1,$ra
	jal inp
	move $ra,ret1
	lhu $3,regh(regs)
	addu $3,$3,regcon01
	sh $3,regh(regs)
	lbu $3,regb(regs)
	addu $3,$3,regconm1
	sb $3,regb(regs)
	slti $3,$3,1
	sll $3,$3,6
	andi regf,regf,0xBF
	or regf,regf,$3
	ori regf,regf,2
	next

outi:	lbu $2,regc(regs)			| EDA3 OUTI
	lhu $3,regh(regs)
	addu $3,targbase,$3
	move ret1,$ra
	jal outp
	move $ra,ret1
	lhu $3,regh(regs)
	addu $3,$3,regcon01
	sh $3,regh(regs)
	lbu $3,regb(regs)
	addu $3,$3,regconm1
	sb $3,regb(regs)
	slti $3,$3,1
	sll $3,$3,6
	andi regf,regf,0xBF
	or regf,regf,$3
	ori regf,regf,2
	next

ldd:	lhu $2,regh(regs)			| EDA8 LDD
	lhu $3,regd(regs)
	addu $2,targbase,$2
	addu $3,targbase,$3
	lbu $4,0($2)
	sb $4,0($3)
	addu $2,$2,regconm1
	sh $2,regh(regs)
	addu $3,$3,regconm1
	sh $3,regd(regs)
	lhu $2,regb(regs)
	addu $2,$2,regconm1
	sh $2,regb(regs)
	beq $2,$0,ldd2
	ori regf,regf,4
	andi regf,regf,0xED
	next
ldd2:	andi regf,regf,0xE9
	next

cpd:	lhu $2,regh(regs)			| EDA9 CPD
	addu $2,targbase,$2
	lbu $3,0($2)
	and $4,regf,regcon01
	cmpflags
	addu $2,$2,regconm1
	sh $2,regh(regs)
	lhu $2,regb(regs)
	addu $2,$2,regconm1
	sh $2,regb(regs)
	andi regf,regf,0xFE
	or regf,regf,$4			| Restore CY
	beq $2,$0,cpd2
	ori regf,regf,4
	next
cpd2:	andi regf,regf,0xFB
	next

ind:	lbu $2,regc(regs)			| EDAA IND
	lhu $3,regh(regs)
	addu $3,targbase,$3
	move ret1,$ra
	jal inp
	move $ra,ret1
	lhu $3,regh(regs)
	addu $3,$3,regconm1
	sh $3,regh(regs)
	lbu $3,regb(regs)
	addu $3,$3,regconm1
	sb $3,regb(regs)
	slti $3,$3,1
	sll $3,$3,6
	andi regf,regf,0xBF
	or regf,regf,$3
	ori regf,regf,2
	next

outd:	lbu $2,regc(regs)			| EDAB OUTD
	lhu $3,regh(regs)
	addu $3,$3,targbase
	move ret1,$ra
	jal outp
	move $ra,ret1
	lhu $3,regh(regs)
	addu $3,$3,regconm1
	sh $3,regh(regs)
	lbu $3,regb(regs)
	addu $3,$3,regconm1
	sb $3,regb(regs)
	slti $3,$3,1
	sll $3,$3,6
	andi regf,regf,0xBF
	or regf,regf,$3
	ori regf,regf,2
	next

ldir:	lhu $2,regb(regs)			| EDB0 LDIR
#  ifdef TRACE
	li $1,21
	mult $1,$2
	lw $3,cycles(regs)
	nop
	mflo $1
	addu $3,$3,$1
	sw $3,cycles(regs)
#  endif
	li $3,0				| Adjust Z-80 registers now.
	sh $3,regb(regs)
	lhu $3,regh(regs)		| Source
	addu $4,$3,$2
	sh $4,regh(regs)
	addu $3,$3,targbase
	lhu $4,regd(regs)		| Destination
	addu $2,$2,$4
	sh $2,regd(regs)
	addu $4,$4,targbase
	addu $4,$4,regconm1
	andi regf,regf,0xC1
ldir2:	lbu $2,0($3)
	sb $2,0($4)
	addu $3,$3,regcon01
	addu $4,$4,regcon01
	addu $2,$2,regconm1
	bne $2,$0,ldir2
	next

cpir:	lhu $1,regb(regs)			| EDB1 CPIR
	and $2,regf,regcon01
	lhu $4,regh(regs)		| Source
	addu $4,$4,targbase
cpir2:
#  ifdef TRACE
	lw $3,cycles(regs)
	addiu $3,$3,21
	sw $3,cycles(regs)
#  endif
	lbu $3,0($4)
	addu $4,$4,regcon01
	cmpflags
	andi $3,regf,0x40
	bne $3,$0,cpir3			| Found.
	addu $1,$1,regconm1
	bne $1,$0,cpir2
	subu $3,$4,targbase		| Not found.
	sh $3,regh(regs)
	andi regf,regf,0xFE		| Restore CY
	or regf,regf,$2
	sh $1,regb(regs)
	andi regf,regf,0xBB		| Not found, count expired.
	next
cpir3:	addu $3,$4,regcon01		| Found.
	subu $3,$3,targbase
	sh $3,regh(regs)
	andi regf,regf,0xFE		| Restore CY
	or regf,regf,$2
	subu $3,$1,regcon01		| Account for successful compare cycle.
	andi $3,$3,0xFFFF
	sh $3,regb(regs)
	beq $3,$0,cpir4
	ori regf,regf,4			| Found, in the string.
	next
cpir4:	andi regf,regf,0xFB		| Found, but at last place.
	next

inir:	lbu $2,regc(regs)			| EDB2 INIR
#  ifdef TRACE
	lw $3,cycles(regs)
	addiu $3,$3,21
	sw $3,cycles(regs)
#  endif
	lhu $3,regh(regs)
	addu $3,$3,targbase
	move ret1,$ra
	jal inp
	move $ra,ret1
	subu $3,$3,targbase
	addu $3,$3,regcon01
	sh $3,regh(regs)
	lhu $3,regb(regs)
	addu $3,$3,regconm1
	sh $3,regb(regs)
	bne $3,$0,inir
	ori regf,regf,0x42
	next

otir:	lbu $2,regc(regs)			| EDB3 OTIR
#  ifdef TRACE
	lw $3,cycles(regs)
	addiu $3,$3,21
	sw $3,cycles(regs)
#  endif
	lhu $3,regh(regs)
	addu $3,$3,targbase
	move ret1,$ra
	jal outp
	move $ra,ret1
	subu $3,$3,targbase
	addu $3,$3,regcon01
	sh $3,regh(regs)
	lhu $3,regb(regs)
	addu $3,$3,regconm1
	sh $3,regb(regs)
	bne $3,$0,otir
	ori regf,regf,0x42
	next

lddr:	lhu $2,regb(regs)			| EDB8 LDDR
#  ifdef TRACE
	li $1,21
	mult $1,$2
	lw $3,cycles(regs)
	nop
	mflo $1
	addu $3,$3,$1
	sw $3,cycles(regs)
#  endif
	li $3,0				| Adjust Z-80 registers now.
	sh $3,regb(regs)
	lhu $3,regh(regs)		| Source
	subu $4,$3,$2
	sh $4,regh(regs)
	addu $3,targbase,$3
	lhu $4,regd(regs)		| Destination
	subu $2,$4,$2
	sh $2,regd(regs)
	addu $4,targbase,$4
	andi regf,regf,0xC1
lddr2:	lbu $2,0($3)
	sb $2,0($4)
	addu $3,$3,regconm1
	addu $4,$4,regconm1
	addu $2,$2,regconm1
	bne $2,$0,lddr2
	next

cpdr:	lhu $1,regb(regs)			| EDB9 CPDR
	and $2,regf,regcon01
	lhu $4,regh(regs)		| Source
	addu $4,$4,targbase
cpdr2:
#  ifdef TRACE
	lw $3,cycles(regs)
	addiu $3,$3,21
	sw $3,cycles(regs)
#  endif
	lbu $3,0($4)
	addu $4,$4,regconm1
	cmpflags
	andi $3,regf,0x40
	bne $3,$0,cpdr3			| Found.
	addu $1,$1,regconm1
	bne $1,$0,cpdr2
	subu $3,$4,targbase		| Not found.
	sh $3,regh(regs)
	andi regf,regf,0xFE		| Restore CY
	or regf,regf,$2
	sh $1,regb(regs)
	andi regf,regf,0xBB		| Not found, count expired.
	next
cpdr3:	addu $3,$4,regconm1		| Found.
	subu $3,$3,targbase
	sh $3,regh(regs)
	andi regf,regf,0xFE		| Restore CY
	or regf,regf,$2
	subu $3,$1,regcon01		| Account for successful compare cycle.
	andi $3,$3,0xFFFF
	sh $3,regb(regs)
	beq $3,$0,cpdr4
	ori regf,regf,4			| Found, in the string.
	next
cpdr4:	andi regf,regf,0xFB		| Found, but at last place.
	next

indr:	lbu $2,regc(regs)			| EDBA INDR
#  ifdef TRACE
	lw $3,cycles(regs)
	addiu $3,$3,21
	sw $3,cycles(regs)
#  endif
	lhu $3,regh(regs)
	addu $3,$3,targbase
	move ret1,$ra
	jal inp
	move $ra,ret1
	subu $3,$3,targbase
	addu $3,$3,regconm1
	sh $3,regh(regs)
	lhu $3,regb(regs)
	addu $3,$3,regconm1
	sh $3,regb(regs)
	bne $3,$0,indr
	ori regf,regf,0x42
	next

otdr:	lbu $2,regc(regs)			| EDBB OTDR
#  ifdef TRACE
	lw $3,cycles(regs)
	addiu $3,$3,21
	sw $3,cycles(regs)
#  endif
	lhu $3,regh(regs)
	addu $3,$3,targbase
	move ret1,$ra
	jal outp
	move $ra,ret1
	subu $3,$3,targbase
	addu $3,$3,regconm1
	sh $3,regh(regs)
	lhu $3,regb(regs)
	addu $3,$3,regconm1
	sh $3,regb(regs)
	bne $3,$0,otdr
	ori regf,regf,0x42
	next

dadiyb:	lhu $2,regb(regs)			| FD09 DAD IY,B
	lhu $3,regiy(regs)
	addu $3,$3,$2
	sh $3,regiy(regs)
	carryf($3)
	next

dadiyd:	lhu $2,regd(regs)			| FD19 DAD IY,D
	lhu $3,regiy(regs)
	addu $3,$3,$2
	sh $3,regiy(regs)
	carryf($3)
	next

lxiiy:	lbu $3,0(pseudopc)			| FD21 LXI IY,nnnn
	sb $3,regyl(regs)
	lbu $3,1(pseudopc)
	addiu pseudopc,pseudopc,2
	sb $3,regyh(regs)
	next

siyd:	getaddr2(pseudopc)			| FD22 SIYD addr
	addu $3,$3,targbase
	lbu $2,regyl(regs)
	sb $2,0($3)
	lbu $2,regyh(regs)
	sb $2,1($3)
	next

inxiy:	lhu $3,regiy(regs)			| FD23 INX IY
	addu $3,$3,regcon01
	sh $3,regiy(regs)
	next

inryh:	lbu $3,regyh(regs)			| FD24 INR YH (undocumented)
	inrflag($3)
	sb $3,regyh(regs)
	next

dcryh:	lbu $3,regyh(regs)			| FD25 DCR YH (undocumented)
	dcrflag($3)
	sb $3,regyh(regs)
	next

mviyh:	lbu $3,0(pseudopc)			| FD26 MVI YH,nn (undocumented)
	addu pseudopc,pseudopc,regcon01
	sb $3,regyh(regs)
	next

dadiyy:	lhu $3,regiy(regs)			| FD29 DAD IY,IY (mult by 2)
	addu $3,$3,$3
	sh $3,regiy(regs)
	carryf($3)
	next

liyd:	getaddr2(pseudopc)			| FD2A LIYD addr
	addu $3,$3,targbase
	lbu $2,0($3)
	sb $2,regyl(regs)
	lbu $2,1($3)
	sb $2,regyh(regs)
	next

dcxiy:	lhu $3,regiy(regs)			| FD2B DCX IY
	subu $3,$3,regcon01
	sh $3,regiy(regs)
	next

inryl:	lbu $3,regyl(regs)			| FD2C INR YL (undocumented)
	inrflag($3)
	sb $3,regyl(regs)
	next

dcryl:	lbu $3,regyl(regs)			| FD2D DCR YL (undocumented)
	dcrflag($3)
	sb $3,regyl(regs)
	next

mviyl:	lbu $3,0(pseudopc)			| FD2E MVI YL,nn (undocumented)
	addu pseudopc,pseudopc,regcon01
	sb $3,regyl(regs)
	next

inriy:	calcind(regiy)				| FD34 INR (IY+d)
	addu $1,targbase,$2
	lbu $3,0($1)
	inrflag($3)
	sb $3,0($1)
	next

dcriy:	calcind(regiy)				| FD35 DCR (IY+d)
	addu $1,targbase,$2
	lbu $3,0($1)
	dcrflag($3)
	sb $3,0($1)
	next

mviiy:	calcind(regiy)				| FD36 MVI (IY+d),nn
	addu $2,targbase,$2
	lbu $3,0(pseudopc)
	addu pseudopc,pseudopc,regcon01
	sb $3,0($2)
	next

dadiys:	subu $2,pseudosp,targbase		| FD39 DAD IY,SP
	lhu $3,regiy(regs)
	addu $3,$3,$2
	sh $3,regiy(regs)
	carryf($3)
	next

movbyh:	lbu $3,regyh(regs)			| FD44 MOV B,YH (undocumented)
	sb $3,regb(regs)
	next

movbyl:	lbu $3,regyl(regs)			| FD45 MOV B,YL (undocumented)
	sb $3,regb(regs)
	next

movbiy:	calcind(regiy)				| FD46 MOV B,(IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regb(regs)
	next

movcyh:	lbu $3,regyh(regs)			| FD4C MOV C,YH (undocumented)
	sb $3,regc(regs)
	next

movcyl:	lbu $3,regyl(regs)			| FD4D MOV C,YL (undocumented)
	sb $3,regc(regs)
	next

movciy:	calcind(regiy)				| FD4E MOV C,(IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regc(regs)
	next

movdyh:	lbu $3,regyh(regs)			| FD54 MOV D,YH (undocumented)
	sb $3,regd(regs)
	next

movdyl:	lbu $3,regyl(regs)			| FD55 MOV D,YL (undocumented)
	sb $3,regd(regs)
	next

movdiy:	calcind(regiy)				| FD56 MOV D,(IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regd(regs)
	next

moveyh:	lbu $3,regyh(regs)			| FD5C MOV E,YH (undocumented)
	sb $3,rege(regs)
	next

moveyl:	lbu $3,regyl(regs)			| FD5D MOV E,YL (undocumented)
	sb $3,rege(regs)
	next

moveiy:	calcind(regiy)				| FD5E MOV E,(IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,rege(regs)
	next

movyhb:	lbu $3,regb(regs)			| FD60 MOV YH,B (undocumented)
	sb $3,regyh(regs)
	next

movyhc:	lbu $3,regc(regs)			| FD61 MOV YH,C (undocumented)
	sb $3,regyh(regs)
	next

movyhd:	lbu $3,regd(regs)			| FD62 MOV YH,D (undocumented)
	sb $3,regyh(regs)
	next

movyhe:	lbu $3,rege(regs)			| FD63 MOV YH,E (undocumented)
	sb $3,regyh(regs)
	next

mvyhyh:	next					| FD64 MOV YH,YH (undocumented)

mvyhyl:	lbu $3,regyl(regs)			| FD65 MOV YH,YL (undocumented)
	sb $3,regyh(regs)
	next

movhiy:	calcind(regiy)				| FD66 MOV H,(IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regh(regs)
	next

movylb:	lbu $3,regb(regs)			| FD68 MOV YL,B (undocumented)
	sb $3,regyl(regs)
	next

movylc:	lbu $3,regc(regs)			| FD69 MOV YL,C (undocumented)
	sb $3,regyl(regs)
	next

movyld:	lbu $3,regd(regs)			| FD6A MOV YL,D (undocumented)
	sb $3,regyl(regs)
	next

movyle:	lbu $3,rege(regs)			| FD6B MOV YL,E (undocumented)
	sb $3,regyl(regs)
	next

mvylyh:	lbu $3,regyh(regs)			| FD6C MOV YL,YH (undocumented)
	sb $3,regyl(regs)
	next

mvylyl:	next					| FD6D MOV YL,YL (undocumented)

movliy:	calcind(regiy)				| FD6E MOV L,(IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sb $3,regl(regs)
	next

moviyb:	calcind(regiy)				| FD70 MOV (IY+d),B
	addu $2,targbase,$2
	lbu $3,regb(regs)
	sb $3,0($2)
	next

moviyc:	calcind(regiy)				| FD71 MOV (IY+d),C
	addu $2,targbase,$2
	lbu $3,regc(regs)
	sb $3,0($2)
	next

moviyd:	calcind(regiy)				| FD72 MOV (IY+d),D
	addu $2,targbase,$2
	lbu $3,regd(regs)
	sb $3,0($2)
	next

moviye:	calcind(regiy)				| FD73 MOV (IY+d),E
	addu $2,targbase,$2
	lbu $3,rege(regs)
	sb $3,0($2)
	next

moviyh:	calcind(regiy)				| FD74 MOV (IY+d),H
	addu $2,targbase,$2
	lbu $3,regh(regs)
	sb $3,0($2)
	next

moviyl:	calcind(regiy)				| FD75 MOV (IY+d),L
	addu $2,targbase,$2
	lbu $3,regl(regs)
	sb $3,0($2)
	next

moviya:	calcind(regiy)				| FD77 MOV (IY+d),A
	addu $2,targbase,$2
	sb rega,0($2)
	next

movayh:	lbu rega,regyh(regs)			| FD7C MOV A,YH (undocumented)
	next

movayl:	lbu rega,regyl(regs)			| FD7D MOV A,YL (undocumented)
	next

movaiy:	calcind(regiy)				| FD7E MOV A,(IY+d)
	addu $2,targbase,$2
	lbu rega,0($2)
	next

addyh:	lbu $3,regyh(regs)			| FD84 ADD YH (undocumented)
	addflags
	next

addyl:	lbu $3,regyl(regs)			| FD85 ADD YL (undocumented)
	addflags
	next

addiy:	calcind(regiy)				| FD86 ADD (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	addflags
	next

adcyh:	lbu $3,regyh(regs)			| FD8C ADC YH (undocumented)
	adcflags
	next

adcyl:	lbu $3,regyl(regs)			| FD8E ADC YL (undocumented)
	adcflags
	next

adciy:	calcind(regix)				| FD8E ADC (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	adcflags
	next
	
subyh:	lbu $3,regyh(regs)			| FD94 SUB YH (undocumented)
	subflags
	next

subyl:	lbu $3,regyl(regs)			| FD95 SUB YL (undocumented)
	subflags
	next

subiy:	calcind(regiy)				| FD96 SUB (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	subflags
	next

sbbyh:	lbu $3,regyh(regs)	 		| FD9C SBB YH (undocumented)
	sbbflags
	next

sbbyl:	lbu $3,regyl(regs)	 		| FD9D SBB YL (undocumented)
	sbbflags
	next

sbbiy:	calcind(regiy)				| FD9E SBB (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	sbbflags
	next

anayh:	lbu $3,regyh(regs)			| FDA4 ANA YH (undocumented)
	and rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

anayl:	lbu $3,regyl(regs)			| FDA5 ANA YL (undocumented)
	and rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

anaiy:	calcind(regiy)				| FDA6 ANA (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	and rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

xrayh:	lbu $3,regyh(regs)			| FDAC XRA YH (undocumented)
	xor rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

xrayl:	lbu $3,regyl(regs)			| FDAD XRA YL (undocumented)
	xor rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

xraiy:	calcind(regiy)				| FDAE XRA (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	xor rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

orayh:	lbu $3,regyh(regs)			| FDB4 ORA YH (undocumented)
	or rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

orayl:	lbu $3,regyl(regs)			| FDB5 ORA YL (undocumented)
	or rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

oraiy:	calcind(regiy)				| FDB6 ORA (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	or rega,rega,$3
	addu $3,lflagptr,rega
	lbu regf,0($3)
	next

cmpyh:	lbu $3,regyh(regs)			| FDBC CMP YH (undocumented)
	cmpflags
	next

cmpyl:	lbu $3,regyl(regs)			| FDBD CMP YL (undocumented)
	cmpflags
	next

| FDCB-prefix instructions can use the DDCB-prefix routines
| since the operand address is already in D0.

cmpiy:	calcind(regiy)				| FDBE CMP (IY+d)
	addu $2,targbase,$2
	lbu $3,0($2)
	cmpflags
	next

popiy:	lbu $3,0(pseudosp)			| FDE1 POP IY
	sb $3,regyl(regs)
	lbu $3,1(pseudosp)
	addiu pseudosp,pseudosp,2
	sb $3,regyh(regs)
	next

xtiy:	lbu $2,regyh(regs)			| FDE3 XTIY
	lbu $3,0(pseudosp)
	sb $2,0(pseudosp)
	sb $3,regyh(regs)
	lbu $2,regyl(regs)
	lbu $3,1(pseudosp)
	sb $2,1(pseudosp)
	sb $3,regyl(regs)
	next

pushiy:	lbu $3,regyh(regs)			| FDE5 PUSH IY
	sb $3,-1(pseudosp)
	lbu $3,regyl(regs)
	sb $3,-2(pseudosp)
	addiu pseudosp,pseudosp,-2
	next

pciy:	lhu $3,regiy(regs)			| FDE9 PCIY
	addu pseudopc,targbase,$3
	next

spiy:	lhu $3,regiy(regs)			| FDF9 SPIY
	addu pseudosp,targbase,$3
	next

|
| 16-bit Linear Congruential Random # Generator from Knuth V2 3.2.1.1 (2).
|
| This generator is (supposedly) the version that repeats more often than
| 65536, as it is modulo 65537 instead of 65536, but it has better distribution
| of low-order bits (of which we are using 8 as our output value).  I was
| unable to follow his mathematical proofs for deriving the optimal multiplier,
| so I did a brute-force test starting with a seed of 1.  This found 535 to
| be a good multiplier, which has a period of 40934.  There may be other
| seeds that generate longer sequences with other multipliers, but there is
| a limit to how much time I want to put into this.
|
| This kind of generator uses no addition step, and so will get stuck if
| it ever gets a seed of 0.  It is of the form:
|
|	X1 = (aX0 + c) MOD (65537), where a is 535 and c is 0.
|
randlp:	lhu $3,seed(regs)
        sub $3,$0,$3		| d0
	srl $3,$3,16
        sra $3,$3,16		| d0, d0
again:	ori $1,$0,535
	mult $1,$3		| d1, d0
	nop
	nop
	mfhi $3			| d1
	mflo $2
        subu $3,$3,$2		| d0, d1
	sll $2,$3,16		| d0, d0
	sra $2,$2,16
        bgez $2,done
        addiu $2,$3,2		| d0, d0
	sll $3,$2,16		| d0, d0
	sra $3,$3,16
        bgtz $3,again
        addiu $2,$3,-1		| d0, d0
done:	sh $2,seed(regs)	| d0
        jr $ra
	nop

|***********************************************************************|
|									|
|	Z-80 opcode dispatch table.  One longword entry per opcode	|
|	of the target (Z-80) processor, including illegals.		|
|									|
|***********************************************************************|

CBoptab:
	entry rlcb,rlcc,rlcd,rlce,rlch,rlcl,rlcm,rlca 			| CB00
	entry rrcb,rrcc,rrcd,rrce,rrch,rrcl,rrcm,rrca 			| CB08
	entry rlrb,rlrc,rlrd,rlre,rlrh,rlrl,rlrm,rlra 			| CB10
	entry rrrb,rrrc,rrrd,rrre,rrrh,rrrl,rrrm,rrra 			| CB18
	entry slab,slac,slad,slae,slah,slal,slam,slaa 			| CB20
	entry srab,srac,srad,srae,srah,sral,sram,sraa 			| CB28
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED	| CB30
	entry srlb,srlc,srld,srle,srlh,srll,srlm,srla 			| CB38
	entry bit0b,bit0c,bit0d,bit0e,bit0h,bit0l,bit0m,bit0a 		| CB40
	entry bit1b,bit1c,bit1d,bit1e,bit1h,bit1l,bit1m,bit1a 		| CB48
	entry bit2b,bit2c,bit2d,bit2e,bit2h,bit2l,bit2m,bit2a 		| CB50
	entry bit3b,bit3c,bit3d,bit3e,bit3h,bit3l,bit3m,bit3a 		| CB58
	entry bit4b,bit4c,bit4d,bit4e,bit4h,bit4l,bit4m,bit4a 		| CB60
	entry bit5b,bit5c,bit5d,bit5e,bit5h,bit5l,bit5m,bit5a 		| CB68
	entry bit6b,bit6c,bit6d,bit6e,bit6h,bit6l,bit6m,bit6a 		| CB70
	entry bit7b,bit7c,bit7d,bit7e,bit7h,bit7l,bit7m,bit7a 		| CB78
	entry res0b,res0c,res0d,res0e,res0h,res0l,res0m,res0a 		| CB80
	entry res1b,res1c,res1d,res1e,res1h,res1l,res1m,res1a 		| CB88
	entry res2b,res2c,res2d,res2e,res2h,res2l,res2m,res2a 		| CB90
	entry res3b,res3c,res3d,res3e,res3h,res3l,res3m,res3a 		| CB98
	entry res4b,res4c,res4d,res4e,res4h,res4l,res4m,res4a 		| CBA0
	entry res5b,res5c,res5d,res5e,res5h,res5l,res5m,res5a 		| CBA8
	entry res6b,res6c,res6d,res6e,res6h,res6l,res6m,res6a 		| CBB0
	entry res7b,res7c,res7d,res7e,res7h,res7l,res7m,res7a 		| CBB8
	entry set0b,set0c,set0d,set0e,set0h,set0l,set0m,set0a 		| CBC0
	entry set1b,set1c,set1d,set1e,set1h,set1l,set1m,set1a 		| CBC8
	entry set2b,set2c,set2d,set2e,set2h,set2l,set2m,set2a 		| CBD0
	entry set3b,set3c,set3d,set3e,set3h,set3l,set3m,set3a 		| CBD8
	entry set4b,set4c,set4d,set4e,set4h,set4l,set4m,set4a 		| CBE0
	entry set5b,set5c,set5d,set5e,set5h,set5l,set5m,set5a 		| CBE8
	entry set6b,set6c,set6d,set6e,set6h,set6l,set6m,set6a 		| CBF0
	entry set7b,set7c,set7d,set7e,set7h,set7l,set7m,set7a 		| CBF8

DDoptab:
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| DD00
	entry illgED,dadixb,illgED,illgED,illgED,illgED,illgED,illgED 	| DD08
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| DD10
	entry illgED,dadixd,illgED,illgED,illgED,illgED,illgED,illgED 	| DD18
	entry illgED,lxiix,sixd,inxix,inrxh,dcrxh,mvixh,illgED		| DD20
	entry illgED,dadixx,lixd,dcxix,inrxl,dcrxl,mvixl,illgED		| DD28
	entry illgED,illgED,illgED,illgED,inrix,dcrix,mviix,illgED	| DD30
	entry illgED,dadixs,illgED,illgED,illgED,illgED,illgED,illgED 	| DD38
	entry illgED,illgED,illgED,illgED,movbxh,movbxl,movbix,illgED 	| DD40
	entry illgED,illgED,illgED,illgED,movcxh,movcxl,movcix,illgED 	| DD48
	entry illgED,illgED,illgED,illgED,movdxh,movdxl,movdix,illgED 	| DD50
	entry illgED,illgED,illgED,illgED,movexh,movexl,moveix,illgED 	| DD58
	entry movxhb,movxhc,movxhd,movxhe,mvxhxh,mvxhxl,movhix,movxha 	| DD60
	entry movxlb,movxlc,movxld,movxle,mvxlxh,mvxlxl,movlix,movxla 	| DD68
	entry movixb,movixc,movixd,movixe,movixh,movixl,illgED,movixa 	| DD70
	entry illgED,illgED,illgED,illgED,movaxh,movaxl,movaix,illgED 	| DD78
	entry illgED,illgED,illgED,illgED,addxh,addxl,addix,illgED	| DD80
	entry illgED,illgED,illgED,illgED,adcxh,adcxl,adcix,illgED	| DD88
	entry illgED,illgED,illgED,illgED,subxh,subxl,subix,illgED	| DD90
	entry illgED,illgED,illgED,illgED,sbbxh,sbbxl,sbbix,illgED	| DD98
	entry illgED,illgED,illgED,illgED,anaxh,anaxl,anaix,illgED	| DDA0
	entry illgED,illgED,illgED,illgED,xraxh,xraxl,xraix,illgED	| DDA8
	entry illgED,illgED,illgED,illgED,oraxh,oraxl,oraix,illgED	| DDB0
	entry illgED,illgED,illgED,illgED,cmpxh,cmpxl,cmpix,illgED	| DDB8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| DDC0
	entry illgED,illgED,illgED,prDDCB,illgED,illgED,illgED,illgED 	| DDC8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| DDD0
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| DDD8
	entry illgED,popix,illgED,xtix,illgED,pushix,illgED,illgED	| DDE0
	entry illgED,pcix,illgED,illgED,illgED,illgED,illgED,illgED	| DDE8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| DDF0
	entry illgED,spix,illgED,illgED,illgED,illgED,illgED,illgED	| DDF8

DDCBopt:
	entry rlcix,rrcix,rlix,rrix,slaix,sraix,ilDDCB,srlix 	      |DDCBdd06
	entry bit0ix,bit1ix,bit2ix,bit3ix,bit4ix,bit5ix,bit6ix,bit7ix |DDCBdd46
	entry res0ix,res1ix,res2ix,res3ix,res4ix,res5ix,res6ix,res7ix |DDCBdd86
	entry set0ix,set1ix,set2ix,set3ix,set4ix,set5ix,set6ix,set7ix |DDCBddC6

EDoptab:
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED00
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED08
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED10
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED18
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED20
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED28
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED30
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED38
	entry inbc,outcb,dsbbb,sbcd,nega,retn,im0,moveia		| ED40
	entry incc,outcc,dadcb,lbcd,illgED,reti,illgED,movera 		| ED48
	entry indc,outcd,dsbbd,sded,illgED,illgED,im1,moveai		| ED50
	entry inec,outce,dadcd,lded,illgED,illgED,im2,movear		| ED58
	entry inhc,outch,dsbbh,illgED,illgED,illgED,illgED,rrd		| ED60
	entry inlc,outcl,dadch,illgED,illgED,illgED,illgED,rld		| ED68
	entry inmc,outcm,dsbbs,sspd,illgED,illgED,illgED,illgED		| ED70
	entry inac,outca,dadcs,lspd,illgED,illgED,illgED,illgED		| ED78
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED80
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED88
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED90
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| ED98
	entry ldi,cmpii,ini,outi,illgED,illgED,illgED,illgED		| EDA0
	entry ldd,cpd,ind,outd,illgED,illgED,illgED,illgED		| EDA8
	entry ldir,cpir,inir,otir,illgED,illgED,illgED,illgED 		| EDB0
	entry lddr,cpdr,indr,otdr,illgED,illgED,illgED,illgED 		| EDB8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDC0
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDC8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDD0
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDD8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDE0
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDE8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDF0
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| EDF8

FDoptab:
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| FD00
	entry illgED,dadiyb,illgED,illgED,illgED,illgED,illgED,illgED 	| FD08
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| FD10
	entry illgED,dadiyd,illgED,illgED,illgED,illgED,illgED,illgED 	| FD18
	entry illgED,lxiiy,siyd,inxiy,inryh,dcryh,mviyh,illgED		| FD20
	entry illgED,dadiyy,liyd,dcxiy,inryl,dcryl,mviyl,illgED		| FD28
	entry illgED,illgED,illgED,illgED,inriy,dcriy,mviiy,illgED	| FD30
	entry illgED,dadiys,illgED,illgED,illgED,illgED,illgED,illgED 	| FD38
	entry illgED,illgED,illgED,illgED,movbyh,movbyl,movbiy,illgED 	| FD40
	entry illgED,illgED,illgED,illgED,movcyh,movcyl,movciy,illgED 	| FD48
	entry illgED,illgED,illgED,illgED,movdyh,movdyl,movdiy,illgED 	| FD50
	entry illgED,illgED,illgED,illgED,moveyh,moveyl,moveiy,illgED 	| FD58
	entry movyhb,movyhc,movyhd,movyhe,mvyhyh,mvyhyl,movhiy,illgED 	| FD60
	entry movylb,movylc,movyld,movyle,mvylyh,mvylyl,movliy,illgED 	| FD68
	entry moviyb,moviyc,moviyd,moviye,moviyh,moviyl,illgED,moviya 	| FD70
	entry illgED,illgED,illgED,illgED,movayh,movayl,movaiy,illgED 	| FD78
	entry illgED,illgED,illgED,illgED,addyh,addyl,addiy,illgED	| FD80
	entry illgED,illgED,illgED,illgED,adcyh,adcyl,adciy,illgED	| FD88
	entry illgED,illgED,illgED,illgED,subyh,subyl,subiy,illgED	| FD90
	entry illgED,illgED,illgED,illgED,sbbyh,sbbyl,sbbiy,illgED	| FD98
	entry illgED,illgED,illgED,illgED,anayh,anayl,anaiy,illgED	| FDA0
	entry illgED,illgED,illgED,illgED,xrayh,xrayl,xraiy,illgED	| FDA8
	entry illgED,illgED,illgED,illgED,orayh,orayl,oraiy,illgED	| FDB0
	entry illgED,illgED,illgED,illgED,cmpyh,cmpyl,cmpiy,illgED	| FDB8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| FDC0
	entry illgED,illgED,illgED,prFDCB,illgED,illgED,illgED,illgED 	| FDC8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| FDD0
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| FDD8
	entry illgED,popiy,illgED,xtiy,illgED,pushiy,illgED,illgED	| FDE0
	entry illgED,pciy,illgED,illgED,illgED,illgED,illgED,illgED	| FDE8
	entry illgED,illgED,illgED,illgED,illgED,illgED,illgED,illgED 	| FDF0
	entry illgED,spiy,illgED,illgED,illgED,illgED,illgED,illgED	| FDF8

| FDCBopt is not necessary - DDCBopt can be used
| since the operand address is in $2 for both routines.

#endif
